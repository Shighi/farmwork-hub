{"ast":null,"code":"// src/services/api.ts\nimport { API_BASE_URL } from '../utils/constants';\nclass ApiService {\n  constructor(baseURL) {\n    this.baseURL = void 0;\n    this.token = null;\n    this.baseURL = baseURL;\n    this.token = localStorage.getItem('token');\n  }\n  getAuthHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers.Authorization = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n  removeToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      ...options,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...options.headers\n      }\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          message: `HTTP ${response.status}: ${response.statusText}`\n        }));\n        throw new Error(errorData.message || 'An error occurred');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('API Request failed:', error);\n      throw error instanceof Error ? error : new Error('Network error occurred');\n    }\n  }\n  async get(endpoint) {\n    return this.request(endpoint, {\n      method: 'GET'\n    });\n  }\n  async post(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined\n    });\n  }\n  async put(endpoint, data) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined\n    });\n  }\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    });\n  }\n\n  // Upload file with FormData\n  async uploadFile(endpoint, formData) {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers = {};\n    if (this.token) {\n      headers.Authorization = `Bearer ${this.token}`;\n    }\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          message: `HTTP ${response.status}: ${response.statusText}`\n        }));\n        throw new Error(errorData.message || 'Upload failed');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Upload failed:', error);\n      throw error instanceof Error ? error : new Error('Upload failed');\n    }\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService(API_BASE_URL);\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","token","localStorage","getItem","getAuthHeaders","headers","Authorization","setToken","setItem","removeToken","removeItem","request","endpoint","options","url","config","response","fetch","ok","errorData","json","catch","message","status","statusText","Error","data","error","console","get","method","post","body","JSON","stringify","undefined","put","delete","uploadFile","formData","apiService"],"sources":["C:/Users/Tunde/Desktop/farmwork-hub/client/src/services/api.ts"],"sourcesContent":["// src/services/api.ts\r\nimport { API_BASE_URL } from '../utils/constants';\r\n\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n}\r\n\r\nclass ApiService {\r\n  private baseURL: string;\r\n  private token: string | null = null;\r\n\r\n  constructor(baseURL: string) {\r\n    this.baseURL = baseURL;\r\n    this.token = localStorage.getItem('token');\r\n  }\r\n\r\n  private getAuthHeaders() {\r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n    \r\n    if (this.token) {\r\n      headers.Authorization = `Bearer ${this.token}`;\r\n    }\r\n    \r\n    return headers;\r\n  }\r\n\r\n  setToken(token: string) {\r\n    this.token = token;\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  removeToken() {\r\n    this.token = null;\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const config: RequestInit = {\r\n      ...options,\r\n      headers: {\r\n        ...this.getAuthHeaders(),\r\n        ...options.headers,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({\r\n          message: `HTTP ${response.status}: ${response.statusText}`,\r\n        }));\r\n        throw new Error(errorData.message || 'An error occurred');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Request failed:', error);\r\n      throw error instanceof Error ? error : new Error('Network error occurred');\r\n    }\r\n  }\r\n\r\n  async get<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { method: 'GET' });\r\n  }\r\n\r\n  async post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'PUT',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n    return this.request<T>(endpoint, { method: 'DELETE' });\r\n  }\r\n\r\n  // Upload file with FormData\r\n  async uploadFile<T>(endpoint: string, formData: FormData): Promise<ApiResponse<T>> {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    \r\n    const headers: Record<string, string> = {};\r\n    if (this.token) {\r\n      headers.Authorization = `Bearer ${this.token}`;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({\r\n          message: `HTTP ${response.status}: ${response.statusText}`,\r\n        }));\r\n        throw new Error(errorData.message || 'Upload failed');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Upload failed:', error);\r\n      throw error instanceof Error ? error : new Error('Upload failed');\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst apiService = new ApiService(API_BASE_URL);\r\n\r\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}