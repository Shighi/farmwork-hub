{"ast":null,"code":"import { AFRICAN_COUNTRIES } from './constants';\n\n/**\n * Format currency based on country/currency code\n */\nexport const formatCurrency = (amount, currencyCode = 'USD', locale = 'en-US') => {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(amount);\n  } catch (error) {\n    // Fallback for unsupported currencies\n    return `${currencyCode} ${amount.toLocaleString()}`;\n  }\n};\n\n/**\n * Format salary range with appropriate currency\n */\nexport const formatSalaryRange = (minSalary, maxSalary, currency, salaryType = 'monthly') => {\n  const formattedMin = formatCurrency(minSalary, currency);\n  const formattedMax = formatCurrency(maxSalary, currency);\n  const period = salaryType === 'daily' ? '/day' : salaryType === 'weekly' ? '/week' : salaryType === 'monthly' ? '/month' : salaryType === 'seasonal' ? '/season' : salaryType === 'fixed' ? ' (fixed)' : '';\n  if (minSalary === maxSalary) {\n    return `${formattedMin}${period}`;\n  }\n  return `${formattedMin} - ${formattedMax}${period}`;\n};\n\n/**\n * Format single salary amount\n */\nexport const formatSalary = (amount, currency, salaryType = 'monthly') => {\n  const formatted = formatCurrency(amount, currency);\n  const period = salaryType === 'daily' ? '/day' : salaryType === 'weekly' ? '/week' : salaryType === 'monthly' ? '/month' : salaryType === 'seasonal' ? '/season' : salaryType === 'piece_rate' ? '/piece' : salaryType === 'fixed' ? ' (fixed)' : '';\n  return `${formatted}${period}`;\n};\n\n/**\n * Format dates for different contexts\n */\nexport const formatDate = (date, format = 'medium', locale = 'en-US') => {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  if (isNaN(dateObj.getTime())) {\n    return 'Invalid date';\n  }\n  switch (format) {\n    case 'short':\n      return dateObj.toLocaleDateString(locale, {\n        year: '2-digit',\n        month: 'short',\n        day: 'numeric'\n      });\n    case 'medium':\n      return dateObj.toLocaleDateString(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    case 'long':\n      return dateObj.toLocaleDateString(locale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'long'\n      });\n    case 'relative':\n      return formatRelativeTime(dateObj);\n    default:\n      return dateObj.toLocaleDateString(locale);\n  }\n};\n\n/**\n * Format relative time (e.g., \"2 days ago\", \"in 3 hours\")\n */\nexport const formatRelativeTime = date => {\n  const now = new Date();\n  const diffInMs = date.getTime() - now.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  const diffInWeeks = Math.floor(diffInDays / 7);\n  const diffInMonths = Math.floor(diffInDays / 30);\n  const diffInYears = Math.floor(diffInDays / 365);\n  const rtf = new Intl.RelativeTimeFormat('en', {\n    numeric: 'auto'\n  });\n  if (Math.abs(diffInMinutes) < 1) {\n    return 'just now';\n  } else if (Math.abs(diffInMinutes) < 60) {\n    return rtf.format(diffInMinutes, 'minute');\n  } else if (Math.abs(diffInHours) < 24) {\n    return rtf.format(diffInHours, 'hour');\n  } else if (Math.abs(diffInDays) < 7) {\n    return rtf.format(diffInDays, 'day');\n  } else if (Math.abs(diffInWeeks) < 4) {\n    return rtf.format(diffInWeeks, 'week');\n  } else if (Math.abs(diffInMonths) < 12) {\n    return rtf.format(diffInMonths, 'month');\n  } else {\n    return rtf.format(diffInYears, 'year');\n  }\n};\n\n/**\n * Format phone numbers for different African countries\n */\nexport const formatPhoneNumber = (phone, countryCode) => {\n  // Remove all non-digit characters except +\n  const cleaned = phone.replace(/[^\\d+]/g, '');\n\n  // If no country code provided, return cleaned number\n  if (!countryCode) {\n    return cleaned;\n  }\n\n  // Basic formatting for common African country codes\n  const formatPatterns = {\n    'KE': num => num.replace(/(\\+254|0)(\\d{3})(\\d{3})(\\d{3})/, '+254 $2 $3 $4'),\n    // Kenya\n    'NG': num => num.replace(/(\\+234|0)(\\d{3})(\\d{3})(\\d{4})/, '+234 $2 $3 $4'),\n    // Nigeria\n    'ZA': num => num.replace(/(\\+27|0)(\\d{2})(\\d{3})(\\d{4})/, '+27 $2 $3 $4'),\n    // South Africa\n    'GH': num => num.replace(/(\\+233|0)(\\d{2})(\\d{3})(\\d{4})/, '+233 $2 $3 $4'),\n    // Ghana\n    'UG': num => num.replace(/(\\+256|0)(\\d{3})(\\d{3})(\\d{3})/, '+256 $2 $3 $4'),\n    // Uganda\n    'TZ': num => num.replace(/(\\+255|0)(\\d{3})(\\d{3})(\\d{3})/, '+255 $2 $3 $4'),\n    // Tanzania\n    'EG': num => num.replace(/(\\+20|0)(\\d{2})(\\d{4})(\\d{4})/, '+20 $2 $3 $4'),\n    // Egypt\n    'ET': num => num.replace(/(\\+251|0)(\\d{2})(\\d{3})(\\d{4})/, '+251 $2 $3 $4'),\n    // Ethiopia\n    'MA': num => num.replace(/(\\+212|0)(\\d{3})(\\d{2})(\\d{2})(\\d{2})/, '+212 $2 $3 $4 $5'),\n    // Morocco\n    'RW': num => num.replace(/(\\+250|0)(\\d{3})(\\d{3})(\\d{3})/, '+250 $2 $3 $4') // Rwanda\n  };\n  const formatter = formatPatterns[countryCode];\n  return formatter ? formatter(cleaned) : cleaned;\n};\n\n/**\n * Format user names properly\n */\nexport const formatName = (firstName, lastName) => {\n  if (!firstName && !lastName) return 'Anonymous User';\n  if (!lastName) return firstName || '';\n  if (!firstName) return lastName;\n  return `${firstName} ${lastName}`;\n};\n\n/**\n * Format job duration\n */\nexport const formatJobDuration = (startDate, endDate) => {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  if (!endDate) {\n    return `Starting ${formatDate(start, 'medium')}`;\n  }\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const durationMs = end.getTime() - start.getTime();\n  const durationDays = Math.ceil(durationMs / (1000 * 60 * 60 * 24));\n  if (durationDays <= 0) {\n    return 'Invalid duration';\n  } else if (durationDays === 1) {\n    return '1 day';\n  } else if (durationDays < 7) {\n    return `${durationDays} days`;\n  } else if (durationDays < 30) {\n    const weeks = Math.ceil(durationDays / 7);\n    return `${weeks} ${weeks === 1 ? 'week' : 'weeks'}`;\n  } else if (durationDays < 365) {\n    const months = Math.ceil(durationDays / 30);\n    return `${months} ${months === 1 ? 'month' : 'months'}`;\n  } else {\n    const years = Math.ceil(durationDays / 365);\n    return `${years} ${years === 1 ? 'year' : 'years'}`;\n  }\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Format numbers with appropriate suffixes (K, M, B)\n */\nexport const formatNumber = num => {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + 'B';\n  } else if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  } else if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n};\n\n/**\n * Format rating display\n */\nexport const formatRating = (rating, totalRatings) => {\n  if (totalRatings === 0) return 'No ratings';\n  const stars = '★'.repeat(Math.floor(rating)) + '☆'.repeat(5 - Math.floor(rating));\n  return `${stars} ${rating.toFixed(1)} (${formatNumber(totalRatings)} ${totalRatings === 1 ? 'rating' : 'ratings'})`;\n};\n\n/**\n * Format location display\n */\nexport const formatLocation = (location, countryCode) => {\n  if (!location) return 'Location not specified';\n  const country = AFRICAN_COUNTRIES.find(c => c.code === countryCode);\n  if (country && !location.includes(country.name)) {\n    return `${location}, ${country.name}`;\n  }\n  return location;\n};\n\n/**\n * Format experience level\n */\nexport const formatExperience = years => {\n  if (years === 0) return 'No experience required';\n  if (years < 1) return 'Less than 1 year';\n  if (years === 1) return '1 year';\n  if (years < 3) return `${years} years`;\n  if (years < 5) return `${years} years (Mid-level)`;\n  if (years < 10) return `${years} years (Senior)`;\n  return `${years}+ years (Expert)`;\n};\n\n/**\n * Format skills list\n */\nexport const formatSkills = (skills, maxDisplay = 3) => {\n  if (!skills || skills.length === 0) return 'No skills specified';\n  if (skills.length <= maxDisplay) {\n    return skills.join(', ');\n  }\n  const displayed = skills.slice(0, maxDisplay);\n  const remaining = skills.length - maxDisplay;\n  return `${displayed.join(', ')} +${remaining} more`;\n};\n\n/**\n * Format application status for display\n */\nexport const formatApplicationStatus = status => {\n  const statusMap = {\n    'pending': 'Under Review',\n    'shortlisted': 'Shortlisted',\n    'interview_scheduled': 'Interview Scheduled',\n    'accepted': 'Accepted',\n    'rejected': 'Not Selected',\n    'withdrawn': 'Withdrawn'\n  };\n  return statusMap[status] || status;\n};\n\n/**\n * Format job type for display\n */\nexport const formatJobType = jobType => {\n  const typeMap = {\n    'temporary': 'Temporary',\n    'seasonal': 'Seasonal',\n    'permanent': 'Permanent',\n    'part_time': 'Part-time',\n    'contract': 'Contract',\n    'casual': 'Casual Work',\n    'internship': 'Internship'\n  };\n  return typeMap[jobType] || jobType;\n};\n\n/**\n * Format job status for display\n */\nexport const formatJobStatus = status => {\n  const statusMap = {\n    'draft': 'Draft',\n    'active': 'Active',\n    'filled': 'Position Filled',\n    'expired': 'Expired',\n    'cancelled': 'Cancelled',\n    'paused': 'Paused'\n  };\n  return statusMap[status] || status;\n};\n\n/**\n * Format distance (for location-based searches)\n */\nexport const formatDistance = distanceInKm => {\n  if (distanceInKm < 1) {\n    return `${Math.round(distanceInKm * 1000)}m away`;\n  } else if (distanceInKm < 100) {\n    return `${distanceInKm.toFixed(1)}km away`;\n  } else {\n    return `${Math.round(distanceInKm)}km away`;\n  }\n};\n\n/**\n * Format work schedule\n */\nexport const formatWorkSchedule = schedule => {\n  const scheduleMap = {\n    'full_time': 'Full-time (8 hours/day)',\n    'part_time': 'Part-time (4-6 hours/day)',\n    'flexible': 'Flexible hours',\n    'shift_work': 'Shift work',\n    'seasonal': 'Seasonal work',\n    'weekend_only': 'Weekends only',\n    'evening_only': 'Evenings only'\n  };\n  return scheduleMap[schedule] || schedule;\n};\n\n/**\n * Format contract duration\n */\nexport const formatContractDuration = (startDate, endDate, contractType = 'fixed') => {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const duration = formatJobDuration(start, end);\n  if (contractType === 'permanent') {\n    return 'Permanent position';\n  } else if (contractType === 'seasonal') {\n    return `Seasonal contract (${duration})`;\n  } else {\n    return `${duration} contract`;\n  }\n};\n\n/**\n * Format salary negotiability\n */\nexport const formatSalaryNegotiability = isNegotiable => {\n  return isNegotiable ? 'Negotiable' : 'Fixed rate';\n};\n\n/**\n * Format urgency level\n */\nexport const formatUrgency = urgency => {\n  const urgencyMap = {\n    'low': 'No rush',\n    'medium': 'Moderate urgency',\n    'high': 'Urgent',\n    'immediate': 'Immediate start required'\n  };\n  return urgencyMap[urgency] || urgency;\n};\n\n/**\n * Format employment benefits\n */\nexport const formatBenefits = benefits => {\n  if (!benefits || benefits.length === 0) return 'No additional benefits';\n  const benefitMap = {\n    'accommodation': 'Accommodation provided',\n    'meals': 'Meals included',\n    'transport': 'Transportation provided',\n    'health_insurance': 'Health insurance',\n    'overtime_pay': 'Overtime pay',\n    'bonus': 'Performance bonus',\n    'training': 'Training provided',\n    'equipment': 'Equipment provided'\n  };\n  const formattedBenefits = benefits.map(benefit => benefitMap[benefit] || benefit);\n  return formattedBenefits.join(', ');\n};\n\n/**\n * Format age requirement\n */\nexport const formatAgeRequirement = (minAge, maxAge) => {\n  if (!minAge && !maxAge) return 'No age restriction';\n  if (minAge && !maxAge) return `${minAge}+ years old`;\n  if (!minAge && maxAge) return `Under ${maxAge} years old`;\n  return `${minAge}-${maxAge} years old`;\n};\n\n/**\n * Format language requirements\n */\nexport const formatLanguages = languages => {\n  if (!languages || languages.length === 0) return 'No language requirements';\n  const languageMap = {\n    'en': 'English',\n    'fr': 'French',\n    'ar': 'Arabic',\n    'sw': 'Swahili',\n    'ha': 'Hausa',\n    'yo': 'Yoruba',\n    'ig': 'Igbo',\n    'am': 'Amharic',\n    'zu': 'Zulu',\n    'af': 'Afrikaans',\n    'pt': 'Portuguese'\n  };\n  const formattedLanguages = languages.map(lang => languageMap[lang] || lang);\n  return formattedLanguages.join(', ');\n};\n\n/**\n * Format transportation method\n */\nexport const formatTransportation = transport => {\n  const transportMap = {\n    'own_vehicle': 'Own vehicle required',\n    'public_transport': 'Public transport accessible',\n    'provided': 'Transportation provided',\n    'walking_distance': 'Walking distance',\n    'bicycle': 'Bicycle accessible',\n    'motorcycle': 'Motorcycle required'\n  };\n  return transportMap[transport] || transport;\n};","map":{"version":3,"names":["AFRICAN_COUNTRIES","formatCurrency","amount","currencyCode","locale","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","error","toLocaleString","formatSalaryRange","minSalary","maxSalary","salaryType","formattedMin","formattedMax","period","formatSalary","formatted","formatDate","date","dateObj","Date","isNaN","getTime","toLocaleDateString","year","month","day","weekday","formatRelativeTime","now","diffInMs","diffInMinutes","Math","floor","diffInHours","diffInDays","diffInWeeks","diffInMonths","diffInYears","rtf","RelativeTimeFormat","numeric","abs","formatPhoneNumber","phone","countryCode","cleaned","replace","formatPatterns","num","formatter","formatName","firstName","lastName","formatJobDuration","startDate","endDate","start","end","durationMs","durationDays","ceil","weeks","months","years","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","formatNumber","toString","formatRating","rating","totalRatings","stars","repeat","formatLocation","location","country","find","c","code","includes","name","formatExperience","formatSkills","skills","maxDisplay","length","join","displayed","slice","remaining","formatApplicationStatus","status","statusMap","formatJobType","jobType","typeMap","formatJobStatus","formatDistance","distanceInKm","round","formatWorkSchedule","schedule","scheduleMap","formatContractDuration","contractType","duration","formatSalaryNegotiability","isNegotiable","formatUrgency","urgency","urgencyMap","formatBenefits","benefits","benefitMap","formattedBenefits","map","benefit","formatAgeRequirement","minAge","maxAge","formatLanguages","languages","languageMap","formattedLanguages","lang","formatTransportation","transport","transportMap"],"sources":["/home/sophie/farmwork-hub/client/src/utils/formatters.ts"],"sourcesContent":["import { AFRICAN_COUNTRIES } from './constants';\n\n/**\n * Format currency based on country/currency code\n */\nexport const formatCurrency = (\n  amount: number,\n  currencyCode: string = 'USD',\n  locale: string = 'en-US'\n): string => {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  } catch (error) {\n    // Fallback for unsupported currencies\n    return `${currencyCode} ${amount.toLocaleString()}`;\n  }\n};\n\n/**\n * Format salary range with appropriate currency\n */\nexport const formatSalaryRange = (\n  minSalary: number,\n  maxSalary: number,\n  currency: string,\n  salaryType: string = 'monthly'\n): string => {\n  const formattedMin = formatCurrency(minSalary, currency);\n  const formattedMax = formatCurrency(maxSalary, currency);\n  \n  const period = salaryType === 'daily' ? '/day' : \n                salaryType === 'weekly' ? '/week' : \n                salaryType === 'monthly' ? '/month' : \n                salaryType === 'seasonal' ? '/season' :\n                salaryType === 'fixed' ? ' (fixed)' : '';\n  \n  if (minSalary === maxSalary) {\n    return `${formattedMin}${period}`;\n  }\n  \n  return `${formattedMin} - ${formattedMax}${period}`;\n};\n\n/**\n * Format single salary amount\n */\nexport const formatSalary = (\n  amount: number,\n  currency: string,\n  salaryType: string = 'monthly'\n): string => {\n  const formatted = formatCurrency(amount, currency);\n  \n  const period = salaryType === 'daily' ? '/day' : \n                salaryType === 'weekly' ? '/week' : \n                salaryType === 'monthly' ? '/month' : \n                salaryType === 'seasonal' ? '/season' :\n                salaryType === 'piece_rate' ? '/piece' :\n                salaryType === 'fixed' ? ' (fixed)' : '';\n  \n  return `${formatted}${period}`;\n};\n\n/**\n * Format dates for different contexts\n */\nexport const formatDate = (\n  date: string | Date,\n  format: 'short' | 'medium' | 'long' | 'relative' = 'medium',\n  locale: string = 'en-US'\n): string => {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  \n  if (isNaN(dateObj.getTime())) {\n    return 'Invalid date';\n  }\n  \n  switch (format) {\n    case 'short':\n      return dateObj.toLocaleDateString(locale, {\n        year: '2-digit',\n        month: 'short',\n        day: 'numeric'\n      });\n    \n    case 'medium':\n      return dateObj.toLocaleDateString(locale, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    \n    case 'long':\n      return dateObj.toLocaleDateString(locale, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'long'\n      });\n    \n    case 'relative':\n      return formatRelativeTime(dateObj);\n    \n    default:\n      return dateObj.toLocaleDateString(locale);\n  }\n};\n\n/**\n * Format relative time (e.g., \"2 days ago\", \"in 3 hours\")\n */\nexport const formatRelativeTime = (date: Date): string => {\n  const now = new Date();\n  const diffInMs = date.getTime() - now.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  const diffInWeeks = Math.floor(diffInDays / 7);\n  const diffInMonths = Math.floor(diffInDays / 30);\n  const diffInYears = Math.floor(diffInDays / 365);\n\n  const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n\n  if (Math.abs(diffInMinutes) < 1) {\n    return 'just now';\n  } else if (Math.abs(diffInMinutes) < 60) {\n    return rtf.format(diffInMinutes, 'minute');\n  } else if (Math.abs(diffInHours) < 24) {\n    return rtf.format(diffInHours, 'hour');\n  } else if (Math.abs(diffInDays) < 7) {\n    return rtf.format(diffInDays, 'day');\n  } else if (Math.abs(diffInWeeks) < 4) {\n    return rtf.format(diffInWeeks, 'week');\n  } else if (Math.abs(diffInMonths) < 12) {\n    return rtf.format(diffInMonths, 'month');\n  } else {\n    return rtf.format(diffInYears, 'year');\n  }\n};\n\n/**\n * Format phone numbers for different African countries\n */\nexport const formatPhoneNumber = (phone: string, countryCode?: string): string => {\n  // Remove all non-digit characters except +\n  const cleaned = phone.replace(/[^\\d+]/g, '');\n  \n  // If no country code provided, return cleaned number\n  if (!countryCode) {\n    return cleaned;\n  }\n  \n  // Basic formatting for common African country codes\n  const formatPatterns: Record<string, (num: string) => string> = {\n    'KE': (num) => num.replace(/(\\+254|0)(\\d{3})(\\d{3})(\\d{3})/, '+254 $2 $3 $4'), // Kenya\n    'NG': (num) => num.replace(/(\\+234|0)(\\d{3})(\\d{3})(\\d{4})/, '+234 $2 $3 $4'), // Nigeria\n    'ZA': (num) => num.replace(/(\\+27|0)(\\d{2})(\\d{3})(\\d{4})/, '+27 $2 $3 $4'), // South Africa\n    'GH': (num) => num.replace(/(\\+233|0)(\\d{2})(\\d{3})(\\d{4})/, '+233 $2 $3 $4'), // Ghana\n    'UG': (num) => num.replace(/(\\+256|0)(\\d{3})(\\d{3})(\\d{3})/, '+256 $2 $3 $4'), // Uganda\n    'TZ': (num) => num.replace(/(\\+255|0)(\\d{3})(\\d{3})(\\d{3})/, '+255 $2 $3 $4'), // Tanzania\n    'EG': (num) => num.replace(/(\\+20|0)(\\d{2})(\\d{4})(\\d{4})/, '+20 $2 $3 $4'), // Egypt\n    'ET': (num) => num.replace(/(\\+251|0)(\\d{2})(\\d{3})(\\d{4})/, '+251 $2 $3 $4'), // Ethiopia\n    'MA': (num) => num.replace(/(\\+212|0)(\\d{3})(\\d{2})(\\d{2})(\\d{2})/, '+212 $2 $3 $4 $5'), // Morocco\n    'RW': (num) => num.replace(/(\\+250|0)(\\d{3})(\\d{3})(\\d{3})/, '+250 $2 $3 $4'), // Rwanda\n  };\n  \n  const formatter = formatPatterns[countryCode];\n  return formatter ? formatter(cleaned) : cleaned;\n};\n\n/**\n * Format user names properly\n */\nexport const formatName = (firstName?: string, lastName?: string): string => {\n  if (!firstName && !lastName) return 'Anonymous User';\n  if (!lastName) return firstName || '';\n  if (!firstName) return lastName;\n  \n  return `${firstName} ${lastName}`;\n};\n\n/**\n * Format job duration\n */\nexport const formatJobDuration = (startDate: string | Date, endDate?: string | Date): string => {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  \n  if (!endDate) {\n    return `Starting ${formatDate(start, 'medium')}`;\n  }\n  \n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const durationMs = end.getTime() - start.getTime();\n  const durationDays = Math.ceil(durationMs / (1000 * 60 * 60 * 24));\n  \n  if (durationDays <= 0) {\n    return 'Invalid duration';\n  } else if (durationDays === 1) {\n    return '1 day';\n  } else if (durationDays < 7) {\n    return `${durationDays} days`;\n  } else if (durationDays < 30) {\n    const weeks = Math.ceil(durationDays / 7);\n    return `${weeks} ${weeks === 1 ? 'week' : 'weeks'}`;\n  } else if (durationDays < 365) {\n    const months = Math.ceil(durationDays / 30);\n    return `${months} ${months === 1 ? 'month' : 'months'}`;\n  } else {\n    const years = Math.ceil(durationDays / 365);\n    return `${years} ${years === 1 ? 'year' : 'years'}`;\n  }\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Format numbers with appropriate suffixes (K, M, B)\n */\nexport const formatNumber = (num: number): string => {\n  if (num >= 1000000000) {\n    return (num / 1000000000).toFixed(1) + 'B';\n  } else if (num >= 1000000) {\n    return (num / 1000000).toFixed(1) + 'M';\n  } else if (num >= 1000) {\n    return (num / 1000).toFixed(1) + 'K';\n  }\n  return num.toString();\n};\n\n/**\n * Format rating display\n */\nexport const formatRating = (rating: number, totalRatings: number): string => {\n  if (totalRatings === 0) return 'No ratings';\n  \n  const stars = '★'.repeat(Math.floor(rating)) + '☆'.repeat(5 - Math.floor(rating));\n  return `${stars} ${rating.toFixed(1)} (${formatNumber(totalRatings)} ${totalRatings === 1 ? 'rating' : 'ratings'})`;\n};\n\n/**\n * Format location display\n */\nexport const formatLocation = (location: string, countryCode?: string): string => {\n  if (!location) return 'Location not specified';\n  \n  const country = AFRICAN_COUNTRIES.find(c => c.code === countryCode);\n  if (country && !location.includes(country.name)) {\n    return `${location}, ${country.name}`;\n  }\n  \n  return location;\n};\n\n/**\n * Format experience level\n */\nexport const formatExperience = (years: number): string => {\n  if (years === 0) return 'No experience required';\n  if (years < 1) return 'Less than 1 year';\n  if (years === 1) return '1 year';\n  if (years < 3) return `${years} years`;\n  if (years < 5) return `${years} years (Mid-level)`;\n  if (years < 10) return `${years} years (Senior)`;\n  return `${years}+ years (Expert)`;\n};\n\n/**\n * Format skills list\n */\nexport const formatSkills = (skills: string[], maxDisplay: number = 3): string => {\n  if (!skills || skills.length === 0) return 'No skills specified';\n  \n  if (skills.length <= maxDisplay) {\n    return skills.join(', ');\n  }\n  \n  const displayed = skills.slice(0, maxDisplay);\n  const remaining = skills.length - maxDisplay;\n  \n  return `${displayed.join(', ')} +${remaining} more`;\n};\n\n/**\n * Format application status for display\n */\nexport const formatApplicationStatus = (status: string): string => {\n  const statusMap: Record<string, string> = {\n    'pending': 'Under Review',\n    'shortlisted': 'Shortlisted',\n    'interview_scheduled': 'Interview Scheduled',\n    'accepted': 'Accepted',\n    'rejected': 'Not Selected',\n    'withdrawn': 'Withdrawn'\n  };\n  \n  return statusMap[status] || status;\n};\n\n/**\n * Format job type for display\n */\nexport const formatJobType = (jobType: string): string => {\n  const typeMap: Record<string, string> = {\n    'temporary': 'Temporary',\n    'seasonal': 'Seasonal',\n    'permanent': 'Permanent',\n    'part_time': 'Part-time',\n    'contract': 'Contract',\n    'casual': 'Casual Work',\n    'internship': 'Internship'\n  };\n  \n  return typeMap[jobType] || jobType;\n};\n\n/**\n * Format job status for display\n */\nexport const formatJobStatus = (status: string): string => {\n  const statusMap: Record<string, string> = {\n    'draft': 'Draft',\n    'active': 'Active',\n    'filled': 'Position Filled',\n    'expired': 'Expired',\n    'cancelled': 'Cancelled',\n    'paused': 'Paused'\n  };\n  \n  return statusMap[status] || status;\n};\n\n/**\n * Format distance (for location-based searches)\n */\nexport const formatDistance = (distanceInKm: number): string => {\n  if (distanceInKm < 1) {\n    return `${Math.round(distanceInKm * 1000)}m away`;\n  } else if (distanceInKm < 100) {\n    return `${distanceInKm.toFixed(1)}km away`;\n  } else {\n    return `${Math.round(distanceInKm)}km away`;\n  }\n};\n\n/**\n * Format work schedule\n */\nexport const formatWorkSchedule = (schedule: string): string => {\n  const scheduleMap: Record<string, string> = {\n    'full_time': 'Full-time (8 hours/day)',\n    'part_time': 'Part-time (4-6 hours/day)',\n    'flexible': 'Flexible hours',\n    'shift_work': 'Shift work',\n    'seasonal': 'Seasonal work',\n    'weekend_only': 'Weekends only',\n    'evening_only': 'Evenings only'\n  };\n  \n  return scheduleMap[schedule] || schedule;\n};\n\n/**\n * Format contract duration\n */\nexport const formatContractDuration = (\n  startDate: string | Date,\n  endDate: string | Date,\n  contractType: string = 'fixed'\n): string => {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  \n  const duration = formatJobDuration(start, end);\n  \n  if (contractType === 'permanent') {\n    return 'Permanent position';\n  } else if (contractType === 'seasonal') {\n    return `Seasonal contract (${duration})`;\n  } else {\n    return `${duration} contract`;\n  }\n};\n\n/**\n * Format salary negotiability\n */\nexport const formatSalaryNegotiability = (isNegotiable: boolean): string => {\n  return isNegotiable ? 'Negotiable' : 'Fixed rate';\n};\n\n/**\n * Format urgency level\n */\nexport const formatUrgency = (urgency: string): string => {\n  const urgencyMap: Record<string, string> = {\n    'low': 'No rush',\n    'medium': 'Moderate urgency',\n    'high': 'Urgent',\n    'immediate': 'Immediate start required'\n  };\n  \n  return urgencyMap[urgency] || urgency;\n};\n\n/**\n * Format employment benefits\n */\nexport const formatBenefits = (benefits: string[]): string => {\n  if (!benefits || benefits.length === 0) return 'No additional benefits';\n  \n  const benefitMap: Record<string, string> = {\n    'accommodation': 'Accommodation provided',\n    'meals': 'Meals included',\n    'transport': 'Transportation provided',\n    'health_insurance': 'Health insurance',\n    'overtime_pay': 'Overtime pay',\n    'bonus': 'Performance bonus',\n    'training': 'Training provided',\n    'equipment': 'Equipment provided'\n  };\n  \n  const formattedBenefits = benefits.map(benefit => \n    benefitMap[benefit] || benefit\n  );\n  \n  return formattedBenefits.join(', ');\n};\n\n/**\n * Format age requirement\n */\nexport const formatAgeRequirement = (minAge?: number, maxAge?: number): string => {\n  if (!minAge && !maxAge) return 'No age restriction';\n  if (minAge && !maxAge) return `${minAge}+ years old`;\n  if (!minAge && maxAge) return `Under ${maxAge} years old`;\n  return `${minAge}-${maxAge} years old`;\n};\n\n/**\n * Format language requirements\n */\nexport const formatLanguages = (languages: string[]): string => {\n  if (!languages || languages.length === 0) return 'No language requirements';\n  \n  const languageMap: Record<string, string> = {\n    'en': 'English',\n    'fr': 'French',\n    'ar': 'Arabic',\n    'sw': 'Swahili',\n    'ha': 'Hausa',\n    'yo': 'Yoruba',\n    'ig': 'Igbo',\n    'am': 'Amharic',\n    'zu': 'Zulu',\n    'af': 'Afrikaans',\n    'pt': 'Portuguese'\n  };\n  \n  const formattedLanguages = languages.map(lang => \n    languageMap[lang] || lang\n  );\n  \n  return formattedLanguages.join(', ');\n};\n\n/**\n * Format transportation method\n */\nexport const formatTransportation = (transport: string): string => {\n  const transportMap: Record<string, string> = {\n    'own_vehicle': 'Own vehicle required',\n    'public_transport': 'Public transport accessible',\n    'provided': 'Transportation provided',\n    'walking_distance': 'Walking distance',\n    'bicycle': 'Bicycle accessible',\n    'motorcycle': 'Motorcycle required'\n  };\n  \n  return transportMap[transport] || transport;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}