{"ast":null,"code":"// src/services/users.ts\nimport apiService from './api';\nimport { demoUsers, demoApplications } from '../data/demoData';\nexport class UsersService {\n  constructor() {\n    this.isUsingDemo = process.env.NODE_ENV === 'development' || !process.env.REACT_APP_API_URL;\n  }\n  async getProfile(userId) {\n    if (this.isUsingDemo) {\n      const targetUserId = userId || 'demo-user-1'; // Default to current user\n      const user = demoUsers.find(u => u.id === targetUserId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      return user;\n    }\n    try {\n      const endpoint = userId ? `/users/${userId}` : '/users/profile';\n      const response = await apiService.get(endpoint);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to fetch profile');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to fetch profile');\n    }\n  }\n  async updateProfile(data) {\n    if (this.isUsingDemo) {\n      const userIndex = demoUsers.findIndex(u => u.id === 'demo-user-1');\n      if (userIndex === -1) {\n        throw new Error('User not found');\n      }\n      const updatedUser = {\n        ...demoUsers[userIndex],\n        ...data,\n        updatedAt: new Date().toISOString()\n      };\n      demoUsers[userIndex] = updatedUser;\n      return updatedUser;\n    }\n    try {\n      const response = await apiService.put('/users/profile', data);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to update profile');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to update profile');\n    }\n  }\n  async uploadAvatar(file) {\n    if (this.isUsingDemo) {\n      // In demo mode, simulate upload by creating a object URL\n      const profilePicture = URL.createObjectURL(file);\n\n      // Update demo user's profile picture\n      const userIndex = demoUsers.findIndex(u => u.id === 'demo-user-1');\n      if (userIndex !== -1) {\n        demoUsers[userIndex].profilePicture = profilePicture;\n      }\n      return {\n        profilePicture\n      };\n    }\n    try {\n      const formData = new FormData();\n      formData.append('avatar', file);\n      const response = await apiService.uploadFile('/users/upload-avatar', formData);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to upload avatar');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to upload avatar');\n    }\n  }\n  async getApplications() {\n    if (this.isUsingDemo) {\n      // Return applications for current demo user\n      return demoApplications.filter(app => app.applicantId === 'demo-user-1');\n    }\n    try {\n      const response = await apiService.get('/applications');\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to fetch applications');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to fetch applications');\n    }\n  }\n  async getApplication(id) {\n    if (this.isUsingDemo) {\n      const application = demoApplications.find(app => app.id === id);\n      if (!application) {\n        throw new Error('Application not found');\n      }\n      return application;\n    }\n    try {\n      const response = await apiService.get(`/applications/${id}`);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to fetch application');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to fetch application');\n    }\n  }\n  async updateApplicationStatus(id, status) {\n    if (this.isUsingDemo) {\n      const appIndex = demoApplications.findIndex(app => app.id === id);\n      if (appIndex === -1) {\n        throw new Error('Application not found');\n      }\n      const updatedApplication = {\n        ...demoApplications[appIndex],\n        status,\n        updatedAt: new Date().toISOString()\n      };\n      demoApplications[appIndex] = updatedApplication;\n      return updatedApplication;\n    }\n    try {\n      const response = await apiService.put(`/applications/${id}`, {\n        status\n      });\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to update application');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to update application');\n    }\n  }\n  async withdrawApplication(id) {\n    if (this.isUsingDemo) {\n      const appIndex = demoApplications.findIndex(app => app.id === id);\n      if (appIndex === -1) {\n        throw new Error('Application not found');\n      }\n      demoApplications[appIndex].status = 'withdrawn';\n      demoApplications[appIndex].updatedAt = new Date().toISOString();\n      return;\n    }\n    try {\n      const response = await apiService.delete(`/applications/${id}`);\n      if (!response.success) {\n        throw new Error(response.message || 'Failed to withdraw application');\n      }\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to withdraw application');\n    }\n  }\n  async getUserRating(userId) {\n    if (this.isUsingDemo) {\n      const user = demoUsers.find(u => u.id === userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Mock reviews data\n      const reviews = [{\n        id: '1',\n        raterId: 'demo-employer-1',\n        ratedUserId: userId,\n        rating: 5,\n        comment: 'Excellent worker, very reliable and skilled.',\n        createdAt: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n      }, {\n        id: '2',\n        raterId: 'demo-employer-2',\n        ratedUserId: userId,\n        rating: 4,\n        comment: 'Good work ethic and punctual.',\n        createdAt: new Date(Date.now() - 172800000).toISOString() // 2 days ago\n      }];\n      return {\n        rating: user.rating,\n        totalRatings: user.totalRatings,\n        reviews: reviews\n      };\n    }\n    try {\n      const response = await apiService.get(`/users/${userId}/rating`);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to fetch user rating');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to fetch user rating');\n    }\n  }\n  async rateUser(userId, rating, comment) {\n    if (this.isUsingDemo) {\n      const newRating = {\n        id: `rating-${Date.now()}`,\n        raterId: 'demo-user-1',\n        // Current user\n        ratedUserId: userId,\n        rating,\n        comment,\n        createdAt: new Date().toISOString()\n      };\n\n      // Update user's rating (simplified calculation)\n      const userIndex = demoUsers.findIndex(u => u.id === userId);\n      if (userIndex !== -1) {\n        const user = demoUsers[userIndex];\n        const newTotalRatings = user.totalRatings + 1;\n        const newAverageRating = (user.rating * user.totalRatings + rating) / newTotalRatings;\n        demoUsers[userIndex] = {\n          ...user,\n          rating: Math.round(newAverageRating * 10) / 10,\n          // Round to 1 decimal\n          totalRatings: newTotalRatings,\n          updatedAt: new Date().toISOString()\n        };\n      }\n      return newRating;\n    }\n    try {\n      const response = await apiService.post(`/users/${userId}/rate`, {\n        rating,\n        comment\n      });\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to rate user');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to rate user');\n    }\n  }\n  async searchUsers(query, userType) {\n    if (this.isUsingDemo) {\n      let users = demoUsers.filter(user => {\n        const matchesQuery = query === '' || user.firstName.toLowerCase().includes(query.toLowerCase()) || user.lastName.toLowerCase().includes(query.toLowerCase()) || user.location.toLowerCase().includes(query.toLowerCase()) || user.skills.some(skill => skill.toLowerCase().includes(query.toLowerCase()));\n        const matchesType = !userType || user.userType === userType;\n        return matchesQuery && matchesType;\n      });\n      return users;\n    }\n    try {\n      const queryParams = new URLSearchParams();\n      queryParams.append('q', query);\n      if (userType) {\n        queryParams.append('type', userType);\n      }\n      const response = await apiService.get(`/users/search?${queryParams.toString()}`);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to search users');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to search users');\n    }\n  }\n  async getEmployerJobs(employerId) {\n    if (this.isUsingDemo) {\n      // This would typically be imported from jobs service, but to avoid circular dependency\n      // we'll return a simple response\n      return [];\n    }\n    try {\n      const response = await apiService.get(`/users/${employerId}/jobs`);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to fetch employer jobs');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to fetch employer jobs');\n    }\n  }\n  async verifyUser(userId) {\n    if (this.isUsingDemo) {\n      const userIndex = demoUsers.findIndex(u => u.id === userId);\n      if (userIndex === -1) {\n        throw new Error('User not found');\n      }\n      const updatedUser = {\n        ...demoUsers[userIndex],\n        isVerified: true,\n        updatedAt: new Date().toISOString()\n      };\n      demoUsers[userIndex] = updatedUser;\n      return updatedUser;\n    }\n    try {\n      const response = await apiService.post(`/users/${userId}/verify`);\n      if (response.success) {\n        return response.data;\n      }\n      throw new Error(response.message || 'Failed to verify user');\n    } catch (error) {\n      throw error instanceof Error ? error : new Error('Failed to verify user');\n    }\n  }\n  async getNotifications() {\n    if (this.isUsingDemo) {\n      // Mock notifications\n      return [{\n        id: '1',\n        type: 'application',\n        title: 'New job application',\n        message: 'Someone applied for your Farm Manager position',\n        isRead: false,\n        createdAt: new Date(Date.now() - 3600000).toISOString() // 1 hour ago\n      }, {\n        id: '2',\n        type: 'job_match',\n        title: 'New job matches your skills',\n        message: 'Check out this Agriculture Technician position in Nairobi',\n        isRead: false,\n        createdAt: new Date(Date.now() - 7200000).toISOString() // 2 hours ago\n      }, {\n        id: '3',\n        type: 'rating',\n        title: 'You received a new rating',\n        message: 'John Doe rated you 5 stars for your excellent work',\n        isRead: true,\n        createdAt: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n      }];\n    }\n    try {\n      const response = await apiService.get('/users/notifications');\n      if (response.success) {\n        return response.data;\n      }\n      return [];\n    } catch (error) {\n      console.error('Failed to fetch notifications:', error);\n      return [];\n    }\n  }\n  async markNotificationAsRead(notificationId) {\n    if (this.isUsingDemo) {\n      // In demo mode, just log the action\n      console.log('Marked notification as read:', notificationId);\n      return;\n    }\n    try {\n      await apiService.put(`/users/notifications/${notificationId}/read`);\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  }\n}\nexport const usersService = new UsersService();","map":{"version":3,"names":["apiService","demoUsers","demoApplications","UsersService","constructor","isUsingDemo","process","env","NODE_ENV","REACT_APP_API_URL","getProfile","userId","targetUserId","user","find","u","id","Error","endpoint","response","get","success","data","message","error","updateProfile","userIndex","findIndex","updatedUser","updatedAt","Date","toISOString","put","uploadAvatar","file","profilePicture","URL","createObjectURL","formData","FormData","append","uploadFile","getApplications","filter","app","applicantId","getApplication","application","updateApplicationStatus","status","appIndex","updatedApplication","withdrawApplication","delete","getUserRating","reviews","raterId","ratedUserId","rating","comment","createdAt","now","totalRatings","rateUser","newRating","newTotalRatings","newAverageRating","Math","round","post","searchUsers","query","userType","users","matchesQuery","firstName","toLowerCase","includes","lastName","location","skills","some","skill","matchesType","queryParams","URLSearchParams","toString","getEmployerJobs","employerId","verifyUser","isVerified","getNotifications","type","title","isRead","console","markNotificationAsRead","notificationId","log","usersService"],"sources":["C:/Users/User/shighi/farmwork-hub/client/src/services/users.ts"],"sourcesContent":["// src/services/users.ts\r\nimport apiService from './api';\r\nimport { User } from '../types/auth';\r\nimport { JobApplication } from '../types/jobs';\r\nimport { demoUsers, demoApplications } from '../data/demoData';\r\n\r\nexport interface UpdateProfileData {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  phoneNumber?: string;\r\n  location?: string;\r\n  bio?: string;\r\n  skills?: string[];\r\n}\r\n\r\nexport interface UserRating {\r\n  id: string;\r\n  raterId: string;\r\n  ratedUserId: string;\r\n  rating: number;\r\n  comment: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport class UsersService {\r\n  private isUsingDemo = process.env.NODE_ENV === 'development' || !process.env.REACT_APP_API_URL;\r\n\r\n  async getProfile(userId?: string): Promise<User> {\r\n    if (this.isUsingDemo) {\r\n      const targetUserId = userId || 'demo-user-1'; // Default to current user\r\n      const user = demoUsers.find(u => u.id === targetUserId);\r\n      \r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      \r\n      return user;\r\n    }\r\n\r\n    try {\r\n      const endpoint = userId ? `/users/${userId}` : '/users/profile';\r\n      const response = await apiService.get<User>(endpoint);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to fetch profile');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to fetch profile');\r\n    }\r\n  }\r\n\r\n  async updateProfile(data: UpdateProfileData): Promise<User> {\r\n    if (this.isUsingDemo) {\r\n      const userIndex = demoUsers.findIndex(u => u.id === 'demo-user-1');\r\n      if (userIndex === -1) {\r\n        throw new Error('User not found');\r\n      }\r\n\r\n      const updatedUser: User = {\r\n        ...demoUsers[userIndex],\r\n        ...data,\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      demoUsers[userIndex] = updatedUser;\r\n      return updatedUser;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.put<User>('/users/profile', data);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to update profile');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to update profile');\r\n    }\r\n  }\r\n\r\n  async uploadAvatar(file: File): Promise<{ profilePicture: string }> {\r\n    if (this.isUsingDemo) {\r\n      // In demo mode, simulate upload by creating a object URL\r\n      const profilePicture = URL.createObjectURL(file);\r\n      \r\n      // Update demo user's profile picture\r\n      const userIndex = demoUsers.findIndex(u => u.id === 'demo-user-1');\r\n      if (userIndex !== -1) {\r\n        demoUsers[userIndex].profilePicture = profilePicture;\r\n      }\r\n      \r\n      return { profilePicture };\r\n    }\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('avatar', file);\r\n\r\n      const response = await apiService.uploadFile<{ profilePicture: string }>(\r\n        '/users/upload-avatar',\r\n        formData\r\n      );\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to upload avatar');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to upload avatar');\r\n    }\r\n  }\r\n\r\n  async getApplications(): Promise<JobApplication[]> {\r\n    if (this.isUsingDemo) {\r\n      // Return applications for current demo user\r\n      return demoApplications.filter(app => app.applicantId === 'demo-user-1');\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.get<JobApplication[]>('/applications');\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to fetch applications');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to fetch applications');\r\n    }\r\n  }\r\n\r\n  async getApplication(id: string): Promise<JobApplication> {\r\n    if (this.isUsingDemo) {\r\n      const application = demoApplications.find(app => app.id === id);\r\n      if (!application) {\r\n        throw new Error('Application not found');\r\n      }\r\n      return application;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.get<JobApplication>(`/applications/${id}`);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to fetch application');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to fetch application');\r\n    }\r\n  }\r\n\r\n  async updateApplicationStatus(id: string, status: JobApplication['status']): Promise<JobApplication> {\r\n    if (this.isUsingDemo) {\r\n      const appIndex = demoApplications.findIndex(app => app.id === id);\r\n      if (appIndex === -1) {\r\n        throw new Error('Application not found');\r\n      }\r\n\r\n      const updatedApplication: JobApplication = {\r\n        ...demoApplications[appIndex],\r\n        status,\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      demoApplications[appIndex] = updatedApplication;\r\n      return updatedApplication;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.put<JobApplication>(`/applications/${id}`, { status });\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to update application');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to update application');\r\n    }\r\n  }\r\n\r\n  async withdrawApplication(id: string): Promise<void> {\r\n    if (this.isUsingDemo) {\r\n      const appIndex = demoApplications.findIndex(app => app.id === id);\r\n      if (appIndex === -1) {\r\n        throw new Error('Application not found');\r\n      }\r\n\r\n      demoApplications[appIndex].status = 'withdrawn';\r\n      demoApplications[appIndex].updatedAt = new Date().toISOString();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.delete(`/applications/${id}`);\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.message || 'Failed to withdraw application');\r\n      }\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to withdraw application');\r\n    }\r\n  }\r\n\r\n  async getUserRating(userId: string): Promise<{ rating: number; totalRatings: number; reviews: UserRating[] }> {\r\n    if (this.isUsingDemo) {\r\n      const user = demoUsers.find(u => u.id === userId);\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n\r\n      // Mock reviews data\r\n      const reviews: UserRating[] = [\r\n        {\r\n          id: '1',\r\n          raterId: 'demo-employer-1',\r\n          ratedUserId: userId,\r\n          rating: 5,\r\n          comment: 'Excellent worker, very reliable and skilled.',\r\n          createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\r\n        },\r\n        {\r\n          id: '2',\r\n          raterId: 'demo-employer-2',\r\n          ratedUserId: userId,\r\n          rating: 4,\r\n          comment: 'Good work ethic and punctual.',\r\n          createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago\r\n        },\r\n      ];\r\n\r\n      return {\r\n        rating: user.rating,\r\n        totalRatings: user.totalRatings,\r\n        reviews: reviews,\r\n      };\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.get<{ rating: number; totalRatings: number; reviews: UserRating[] }>(\r\n        `/users/${userId}/rating`\r\n      );\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to fetch user rating');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to fetch user rating');\r\n    }\r\n  }\r\n\r\n  async rateUser(userId: string, rating: number, comment: string): Promise<UserRating> {\r\n    if (this.isUsingDemo) {\r\n      const newRating: UserRating = {\r\n        id: `rating-${Date.now()}`,\r\n        raterId: 'demo-user-1', // Current user\r\n        ratedUserId: userId,\r\n        rating,\r\n        comment,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n\r\n      // Update user's rating (simplified calculation)\r\n      const userIndex = demoUsers.findIndex(u => u.id === userId);\r\n      if (userIndex !== -1) {\r\n        const user = demoUsers[userIndex];\r\n        const newTotalRatings = user.totalRatings + 1;\r\n        const newAverageRating = ((user.rating * user.totalRatings) + rating) / newTotalRatings;\r\n        \r\n        demoUsers[userIndex] = {\r\n          ...user,\r\n          rating: Math.round(newAverageRating * 10) / 10, // Round to 1 decimal\r\n          totalRatings: newTotalRatings,\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n      }\r\n\r\n      return newRating;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.post<UserRating>(`/users/${userId}/rate`, { rating, comment });\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to rate user');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to rate user');\r\n    }\r\n  }\r\n\r\n  async searchUsers(query: string, userType?: 'worker' | 'employer'): Promise<User[]> {\r\n    if (this.isUsingDemo) {\r\n      let users = demoUsers.filter(user => {\r\n        const matchesQuery = query === '' || \r\n          user.firstName.toLowerCase().includes(query.toLowerCase()) ||\r\n          user.lastName.toLowerCase().includes(query.toLowerCase()) ||\r\n          user.location.toLowerCase().includes(query.toLowerCase()) ||\r\n          user.skills.some(skill => skill.toLowerCase().includes(query.toLowerCase()));\r\n        \r\n        const matchesType = !userType || user.userType === userType;\r\n        \r\n        return matchesQuery && matchesType;\r\n      });\r\n\r\n      return users;\r\n    }\r\n\r\n    try {\r\n      const queryParams = new URLSearchParams();\r\n      queryParams.append('q', query);\r\n      if (userType) {\r\n        queryParams.append('type', userType);\r\n      }\r\n\r\n      const response = await apiService.get<User[]>(`/users/search?${queryParams.toString()}`);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to search users');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to search users');\r\n    }\r\n  }\r\n\r\n  async getEmployerJobs(employerId: string): Promise<any[]> {\r\n    if (this.isUsingDemo) {\r\n      // This would typically be imported from jobs service, but to avoid circular dependency\r\n      // we'll return a simple response\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.get<any[]>(`/users/${employerId}/jobs`);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to fetch employer jobs');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to fetch employer jobs');\r\n    }\r\n  }\r\n\r\n  async verifyUser(userId: string): Promise<User> {\r\n    if (this.isUsingDemo) {\r\n      const userIndex = demoUsers.findIndex(u => u.id === userId);\r\n      if (userIndex === -1) {\r\n        throw new Error('User not found');\r\n      }\r\n\r\n      const updatedUser: User = {\r\n        ...demoUsers[userIndex],\r\n        isVerified: true,\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      demoUsers[userIndex] = updatedUser;\r\n      return updatedUser;\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.post<User>(`/users/${userId}/verify`);\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to verify user');\r\n    } catch (error) {\r\n      throw error instanceof Error ? error : new Error('Failed to verify user');\r\n    }\r\n  }\r\n\r\n  async getNotifications(): Promise<any[]> {\r\n    if (this.isUsingDemo) {\r\n      // Mock notifications\r\n      return [\r\n        {\r\n          id: '1',\r\n          type: 'application',\r\n          title: 'New job application',\r\n          message: 'Someone applied for your Farm Manager position',\r\n          isRead: false,\r\n          createdAt: new Date(Date.now() - 3600000).toISOString(), // 1 hour ago\r\n        },\r\n        {\r\n          id: '2',\r\n          type: 'job_match',\r\n          title: 'New job matches your skills',\r\n          message: 'Check out this Agriculture Technician position in Nairobi',\r\n          isRead: false,\r\n          createdAt: new Date(Date.now() - 7200000).toISOString(), // 2 hours ago\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'rating',\r\n          title: 'You received a new rating',\r\n          message: 'John Doe rated you 5 stars for your excellent work',\r\n          isRead: true,\r\n          createdAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago\r\n        },\r\n      ];\r\n    }\r\n\r\n    try {\r\n      const response = await apiService.get<any[]>('/users/notifications');\r\n      \r\n      if (response.success) {\r\n        return response.data;\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Failed to fetch notifications:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async markNotificationAsRead(notificationId: string): Promise<void> {\r\n    if (this.isUsingDemo) {\r\n      // In demo mode, just log the action\r\n      console.log('Marked notification as read:', notificationId);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await apiService.put(`/users/notifications/${notificationId}/read`);\r\n    } catch (error) {\r\n      console.error('Failed to mark notification as read:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const usersService = new UsersService();"],"mappings":"AAAA;AACA,OAAOA,UAAU,MAAM,OAAO;AAG9B,SAASC,SAAS,EAAEC,gBAAgB,QAAQ,kBAAkB;AAoB9D,OAAO,MAAMC,YAAY,CAAC;EAAAC,YAAA;IAAA,KAChBC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,IAAI,CAACF,OAAO,CAACC,GAAG,CAACE,iBAAiB;EAAA;EAE9F,MAAMC,UAAUA,CAACC,MAAe,EAAiB;IAC/C,IAAI,IAAI,CAACN,WAAW,EAAE;MACpB,MAAMO,YAAY,GAAGD,MAAM,IAAI,aAAa,CAAC,CAAC;MAC9C,MAAME,IAAI,GAAGZ,SAAS,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,YAAY,CAAC;MAEvD,IAAI,CAACC,IAAI,EAAE;QACT,MAAM,IAAII,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA,OAAOJ,IAAI;IACb;IAEA,IAAI;MACF,MAAMK,QAAQ,GAAGP,MAAM,GAAG,UAAUA,MAAM,EAAE,GAAG,gBAAgB;MAC/D,MAAMQ,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAOF,QAAQ,CAAC;MAErD,IAAIC,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,yBAAyB,CAAC;IAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,yBAAyB,CAAC;IAC7E;EACF;EAEA,MAAMQ,aAAaA,CAACH,IAAuB,EAAiB;IAC1D,IAAI,IAAI,CAACjB,WAAW,EAAE;MACpB,MAAMqB,SAAS,GAAGzB,SAAS,CAAC0B,SAAS,CAACZ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,aAAa,CAAC;MAClE,IAAIU,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,MAAM,IAAIT,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA,MAAMW,WAAiB,GAAG;QACxB,GAAG3B,SAAS,CAACyB,SAAS,CAAC;QACvB,GAAGJ,IAAI;QACPO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED9B,SAAS,CAACyB,SAAS,CAAC,GAAGE,WAAW;MAClC,OAAOA,WAAW;IACpB;IAEA,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMnB,UAAU,CAACgC,GAAG,CAAO,gBAAgB,EAAEV,IAAI,CAAC;MAEnE,IAAIH,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,0BAA0B,CAAC;IACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,0BAA0B,CAAC;IAC9E;EACF;EAEA,MAAMgB,YAAYA,CAACC,IAAU,EAAuC;IAClE,IAAI,IAAI,CAAC7B,WAAW,EAAE;MACpB;MACA,MAAM8B,cAAc,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;;MAEhD;MACA,MAAMR,SAAS,GAAGzB,SAAS,CAAC0B,SAAS,CAACZ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,aAAa,CAAC;MAClE,IAAIU,SAAS,KAAK,CAAC,CAAC,EAAE;QACpBzB,SAAS,CAACyB,SAAS,CAAC,CAACS,cAAc,GAAGA,cAAc;MACtD;MAEA,OAAO;QAAEA;MAAe,CAAC;IAC3B;IAEA,IAAI;MACF,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEN,IAAI,CAAC;MAE/B,MAAMf,QAAQ,GAAG,MAAMnB,UAAU,CAACyC,UAAU,CAC1C,sBAAsB,EACtBH,QACF,CAAC;MAED,IAAInB,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,yBAAyB,CAAC;IAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,yBAAyB,CAAC;IAC7E;EACF;EAEA,MAAMyB,eAAeA,CAAA,EAA8B;IACjD,IAAI,IAAI,CAACrC,WAAW,EAAE;MACpB;MACA,OAAOH,gBAAgB,CAACyC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,WAAW,KAAK,aAAa,CAAC;IAC1E;IAEA,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAmB,eAAe,CAAC;MAExE,IAAID,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,8BAA8B,CAAC;IACrE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,8BAA8B,CAAC;IAClF;EACF;EAEA,MAAM6B,cAAcA,CAAC9B,EAAU,EAA2B;IACxD,IAAI,IAAI,CAACX,WAAW,EAAE;MACpB,MAAM0C,WAAW,GAAG7C,gBAAgB,CAACY,IAAI,CAAC8B,GAAG,IAAIA,GAAG,CAAC5B,EAAE,KAAKA,EAAE,CAAC;MAC/D,IAAI,CAAC+B,WAAW,EAAE;QAChB,MAAM,IAAI9B,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,OAAO8B,WAAW;IACpB;IAEA,IAAI;MACF,MAAM5B,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAiB,iBAAiBJ,EAAE,EAAE,CAAC;MAE5E,IAAIG,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,6BAA6B,CAAC;IACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,6BAA6B,CAAC;IACjF;EACF;EAEA,MAAM+B,uBAAuBA,CAAChC,EAAU,EAAEiC,MAAgC,EAA2B;IACnG,IAAI,IAAI,CAAC5C,WAAW,EAAE;MACpB,MAAM6C,QAAQ,GAAGhD,gBAAgB,CAACyB,SAAS,CAACiB,GAAG,IAAIA,GAAG,CAAC5B,EAAE,KAAKA,EAAE,CAAC;MACjE,IAAIkC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB,MAAM,IAAIjC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEA,MAAMkC,kBAAkC,GAAG;QACzC,GAAGjD,gBAAgB,CAACgD,QAAQ,CAAC;QAC7BD,MAAM;QACNpB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED7B,gBAAgB,CAACgD,QAAQ,CAAC,GAAGC,kBAAkB;MAC/C,OAAOA,kBAAkB;IAC3B;IAEA,IAAI;MACF,MAAMhC,QAAQ,GAAG,MAAMnB,UAAU,CAACgC,GAAG,CAAiB,iBAAiBhB,EAAE,EAAE,EAAE;QAAEiC;MAAO,CAAC,CAAC;MAExF,IAAI9B,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,8BAA8B,CAAC;IACrE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,8BAA8B,CAAC;IAClF;EACF;EAEA,MAAMmC,mBAAmBA,CAACpC,EAAU,EAAiB;IACnD,IAAI,IAAI,CAACX,WAAW,EAAE;MACpB,MAAM6C,QAAQ,GAAGhD,gBAAgB,CAACyB,SAAS,CAACiB,GAAG,IAAIA,GAAG,CAAC5B,EAAE,KAAKA,EAAE,CAAC;MACjE,IAAIkC,QAAQ,KAAK,CAAC,CAAC,EAAE;QACnB,MAAM,IAAIjC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEAf,gBAAgB,CAACgD,QAAQ,CAAC,CAACD,MAAM,GAAG,WAAW;MAC/C/C,gBAAgB,CAACgD,QAAQ,CAAC,CAACrB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC/D;IACF;IAEA,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMnB,UAAU,CAACqD,MAAM,CAAC,iBAAiBrC,EAAE,EAAE,CAAC;MAE/D,IAAI,CAACG,QAAQ,CAACE,OAAO,EAAE;QACrB,MAAM,IAAIJ,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,gCAAgC,CAAC;MACvE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,gCAAgC,CAAC;IACpF;EACF;EAEA,MAAMqC,aAAaA,CAAC3C,MAAc,EAA4E;IAC5G,IAAI,IAAI,CAACN,WAAW,EAAE;MACpB,MAAMQ,IAAI,GAAGZ,SAAS,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAAC;MACjD,IAAI,CAACE,IAAI,EAAE;QACT,MAAM,IAAII,KAAK,CAAC,gBAAgB,CAAC;MACnC;;MAEA;MACA,MAAMsC,OAAqB,GAAG,CAC5B;QACEvC,EAAE,EAAE,GAAG;QACPwC,OAAO,EAAE,iBAAiB;QAC1BC,WAAW,EAAE9C,MAAM;QACnB+C,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE,8CAA8C;QACvDC,SAAS,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAAC+B,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC9B,WAAW,CAAC,CAAC,CAAE;MAC5D,CAAC,EACD;QACEf,EAAE,EAAE,GAAG;QACPwC,OAAO,EAAE,iBAAiB;QAC1BC,WAAW,EAAE9C,MAAM;QACnB+C,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE,+BAA+B;QACxCC,SAAS,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAAC+B,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC9B,WAAW,CAAC,CAAC,CAAE;MAC7D,CAAC,CACF;MAED,OAAO;QACL2B,MAAM,EAAE7C,IAAI,CAAC6C,MAAM;QACnBI,YAAY,EAAEjD,IAAI,CAACiD,YAAY;QAC/BP,OAAO,EAAEA;MACX,CAAC;IACH;IAEA,IAAI;MACF,MAAMpC,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CACnC,UAAUT,MAAM,SAClB,CAAC;MAED,IAAIQ,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,6BAA6B,CAAC;IACpE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,6BAA6B,CAAC;IACjF;EACF;EAEA,MAAM8C,QAAQA,CAACpD,MAAc,EAAE+C,MAAc,EAAEC,OAAe,EAAuB;IACnF,IAAI,IAAI,CAACtD,WAAW,EAAE;MACpB,MAAM2D,SAAqB,GAAG;QAC5BhD,EAAE,EAAE,UAAUc,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAE;QAC1BL,OAAO,EAAE,aAAa;QAAE;QACxBC,WAAW,EAAE9C,MAAM;QACnB+C,MAAM;QACNC,OAAO;QACPC,SAAS,EAAE,IAAI9B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;;MAED;MACA,MAAML,SAAS,GAAGzB,SAAS,CAAC0B,SAAS,CAACZ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAAC;MAC3D,IAAIe,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,MAAMb,IAAI,GAAGZ,SAAS,CAACyB,SAAS,CAAC;QACjC,MAAMuC,eAAe,GAAGpD,IAAI,CAACiD,YAAY,GAAG,CAAC;QAC7C,MAAMI,gBAAgB,GAAG,CAAErD,IAAI,CAAC6C,MAAM,GAAG7C,IAAI,CAACiD,YAAY,GAAIJ,MAAM,IAAIO,eAAe;QAEvFhE,SAAS,CAACyB,SAAS,CAAC,GAAG;UACrB,GAAGb,IAAI;UACP6C,MAAM,EAAES,IAAI,CAACC,KAAK,CAACF,gBAAgB,GAAG,EAAE,CAAC,GAAG,EAAE;UAAE;UAChDJ,YAAY,EAAEG,eAAe;UAC7BpC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC;MACH;MAEA,OAAOiC,SAAS;IAClB;IAEA,IAAI;MACF,MAAM7C,QAAQ,GAAG,MAAMnB,UAAU,CAACqE,IAAI,CAAa,UAAU1D,MAAM,OAAO,EAAE;QAAE+C,MAAM;QAAEC;MAAQ,CAAC,CAAC;MAEhG,IAAIxC,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,qBAAqB,CAAC;IAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,qBAAqB,CAAC;IACzE;EACF;EAEA,MAAMqD,WAAWA,CAACC,KAAa,EAAEC,QAAgC,EAAmB;IAClF,IAAI,IAAI,CAACnE,WAAW,EAAE;MACpB,IAAIoE,KAAK,GAAGxE,SAAS,CAAC0C,MAAM,CAAC9B,IAAI,IAAI;QACnC,MAAM6D,YAAY,GAAGH,KAAK,KAAK,EAAE,IAC/B1D,IAAI,CAAC8D,SAAS,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC,IAC1D/D,IAAI,CAACiE,QAAQ,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC,IACzD/D,IAAI,CAACkE,QAAQ,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC,IACzD/D,IAAI,CAACmE,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACN,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC,CAAC;QAE9E,MAAMO,WAAW,GAAG,CAACX,QAAQ,IAAI3D,IAAI,CAAC2D,QAAQ,KAAKA,QAAQ;QAE3D,OAAOE,YAAY,IAAIS,WAAW;MACpC,CAAC,CAAC;MAEF,OAAOV,KAAK;IACd;IAEA,IAAI;MACF,MAAMW,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;MACzCD,WAAW,CAAC5C,MAAM,CAAC,GAAG,EAAE+B,KAAK,CAAC;MAC9B,IAAIC,QAAQ,EAAE;QACZY,WAAW,CAAC5C,MAAM,CAAC,MAAM,EAAEgC,QAAQ,CAAC;MACtC;MAEA,MAAMrD,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAS,iBAAiBgE,WAAW,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC;MAExF,IAAInE,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,wBAAwB,CAAC;IAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,wBAAwB,CAAC;IAC5E;EACF;EAEA,MAAMsE,eAAeA,CAACC,UAAkB,EAAkB;IACxD,IAAI,IAAI,CAACnF,WAAW,EAAE;MACpB;MACA;MACA,OAAO,EAAE;IACX;IAEA,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAQ,UAAUoE,UAAU,OAAO,CAAC;MAEzE,IAAIrE,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,+BAA+B,CAAC;IACtE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,+BAA+B,CAAC;IACnF;EACF;EAEA,MAAMwE,UAAUA,CAAC9E,MAAc,EAAiB;IAC9C,IAAI,IAAI,CAACN,WAAW,EAAE;MACpB,MAAMqB,SAAS,GAAGzB,SAAS,CAAC0B,SAAS,CAACZ,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAAC;MAC3D,IAAIe,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,MAAM,IAAIT,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA,MAAMW,WAAiB,GAAG;QACxB,GAAG3B,SAAS,CAACyB,SAAS,CAAC;QACvBgE,UAAU,EAAE,IAAI;QAChB7D,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED9B,SAAS,CAACyB,SAAS,CAAC,GAAGE,WAAW;MAClC,OAAOA,WAAW;IACpB;IAEA,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMnB,UAAU,CAACqE,IAAI,CAAO,UAAU1D,MAAM,SAAS,CAAC;MAEvE,IAAIQ,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,MAAM,IAAIL,KAAK,CAACE,QAAQ,CAACI,OAAO,IAAI,uBAAuB,CAAC;IAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMA,KAAK,YAAYP,KAAK,GAAGO,KAAK,GAAG,IAAIP,KAAK,CAAC,uBAAuB,CAAC;IAC3E;EACF;EAEA,MAAM0E,gBAAgBA,CAAA,EAAmB;IACvC,IAAI,IAAI,CAACtF,WAAW,EAAE;MACpB;MACA,OAAO,CACL;QACEW,EAAE,EAAE,GAAG;QACP4E,IAAI,EAAE,aAAa;QACnBC,KAAK,EAAE,qBAAqB;QAC5BtE,OAAO,EAAE,gDAAgD;QACzDuE,MAAM,EAAE,KAAK;QACblC,SAAS,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAAC+B,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC9B,WAAW,CAAC,CAAC,CAAE;MAC3D,CAAC,EACD;QACEf,EAAE,EAAE,GAAG;QACP4E,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,6BAA6B;QACpCtE,OAAO,EAAE,2DAA2D;QACpEuE,MAAM,EAAE,KAAK;QACblC,SAAS,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAAC+B,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC9B,WAAW,CAAC,CAAC,CAAE;MAC3D,CAAC,EACD;QACEf,EAAE,EAAE,GAAG;QACP4E,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE,2BAA2B;QAClCtE,OAAO,EAAE,oDAAoD;QAC7DuE,MAAM,EAAE,IAAI;QACZlC,SAAS,EAAE,IAAI9B,IAAI,CAACA,IAAI,CAAC+B,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC9B,WAAW,CAAC,CAAC,CAAE;MAC5D,CAAC,CACF;IACH;IAEA,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMnB,UAAU,CAACoB,GAAG,CAAQ,sBAAsB,CAAC;MAEpE,IAAID,QAAQ,CAACE,OAAO,EAAE;QACpB,OAAOF,QAAQ,CAACG,IAAI;MACtB;MAEA,OAAO,EAAE;IACX,CAAC,CAAC,OAAOE,KAAK,EAAE;MACduE,OAAO,CAACvE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,EAAE;IACX;EACF;EAEA,MAAMwE,sBAAsBA,CAACC,cAAsB,EAAiB;IAClE,IAAI,IAAI,CAAC5F,WAAW,EAAE;MACpB;MACA0F,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAED,cAAc,CAAC;MAC3D;IACF;IAEA,IAAI;MACF,MAAMjG,UAAU,CAACgC,GAAG,CAAC,wBAAwBiE,cAAc,OAAO,CAAC;IACrE,CAAC,CAAC,OAAOzE,KAAK,EAAE;MACduE,OAAO,CAACvE,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF;AACF;AAEA,OAAO,MAAM2E,YAAY,GAAG,IAAIhG,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}