{"ast":null,"code":"import { VALIDATION_RULES } from './constants';\n\n// Types for validation results\n\n// Job form data type\n\n// Email validation - supports international domains\nexport const validateEmail = email => {\n  if (!email) {\n    return {\n      isValid: false,\n      error: 'Email is required'\n    };\n  }\n  if (!VALIDATION_RULES.EMAIL_PATTERN.test(email)) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid email address'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Password validation with strength requirements\nexport const validatePassword = password => {\n  if (!password) {\n    return {\n      isValid: false,\n      error: 'Password is required'\n    };\n  }\n  if (password.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\n    return {\n      isValid: false,\n      error: `Password must be at least ${VALIDATION_RULES.PASSWORD_MIN_LENGTH} characters long`\n    };\n  }\n\n  // Check for at least one uppercase letter\n  if (!/[A-Z]/.test(password)) {\n    return {\n      isValid: false,\n      error: 'Password must contain at least one uppercase letter'\n    };\n  }\n\n  // Check for at least one lowercase letter\n  if (!/[a-z]/.test(password)) {\n    return {\n      isValid: false,\n      error: 'Password must contain at least one lowercase letter'\n    };\n  }\n\n  // Check for at least one number\n  if (!/\\d/.test(password)) {\n    return {\n      isValid: false,\n      error: 'Password must contain at least one number'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Password confirmation validation\nexport const validatePasswordConfirmation = (password, confirmPassword) => {\n  if (!confirmPassword) {\n    return {\n      isValid: false,\n      error: 'Please confirm your password'\n    };\n  }\n  if (password !== confirmPassword) {\n    return {\n      isValid: false,\n      error: 'Passwords do not match'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// African phone number validation - supports multiple countries\nexport const validatePhoneNumber = (phoneNumber, country) => {\n  if (!phoneNumber) {\n    return {\n      isValid: false,\n      error: 'Phone number is required'\n    };\n  }\n\n  // Remove spaces and special characters for validation\n  const cleanNumber = phoneNumber.replace(/[\\s\\-\\(\\)]/g, '');\n\n  // Country-specific patterns\n  const patterns = {\n    KE: /^(\\+254|0)(7|1)\\d{8}$/,\n    // Kenya\n    UG: /^(\\+256|0)(7|3|4)\\d{8}$/,\n    // Uganda\n    TZ: /^(\\+255|0)(7|6)\\d{8}$/,\n    // Tanzania\n    RW: /^(\\+250|0)(7|2)\\d{8}$/,\n    // Rwanda\n    ET: /^(\\+251|0)(9|7)\\d{8}$/,\n    // Ethiopia\n    GH: /^(\\+233|0)(2|5)\\d{8}$/,\n    // Ghana\n    NG: /^(\\+234|0)(7|8|9)\\d{9}$/,\n    // Nigeria\n    ZA: /^(\\+27|0)(6|7|8)\\d{8}$/,\n    // South Africa\n    // Generic African pattern for other countries\n    generic: /^(\\+\\d{1,3}|0)\\d{8,12}$/\n  };\n\n  // Use country-specific pattern if provided, otherwise try all patterns\n  if (country && patterns[country]) {\n    const pattern = patterns[country];\n    if (!pattern.test(cleanNumber)) {\n      return {\n        isValid: false,\n        error: 'Please enter a valid phone number for your country'\n      };\n    }\n  } else {\n    // Try all patterns to see if any match\n    const isValid = Object.values(patterns).some(pattern => pattern.test(cleanNumber));\n    if (!isValid) {\n      return {\n        isValid: false,\n        error: 'Please enter a valid African phone number'\n      };\n    }\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Name validation\nexport const validateName = (name, fieldName = 'Name') => {\n  if (!name || !name.trim()) {\n    return {\n      isValid: false,\n      error: `${fieldName} is required`\n    };\n  }\n  const trimmedName = name.trim();\n  if (trimmedName.length < VALIDATION_RULES.NAME_MIN_LENGTH) {\n    return {\n      isValid: false,\n      error: `${fieldName} must be at least ${VALIDATION_RULES.NAME_MIN_LENGTH} characters long`\n    };\n  }\n  if (trimmedName.length > VALIDATION_RULES.NAME_MAX_LENGTH) {\n    return {\n      isValid: false,\n      error: `${fieldName} must not exceed ${VALIDATION_RULES.NAME_MAX_LENGTH} characters`\n    };\n  }\n\n  // Allow letters, spaces, hyphens, and apostrophes (for African names)\n  if (!/^[a-zA-Z\\s\\-']+$/.test(trimmedName)) {\n    return {\n      isValid: false,\n      error: `${fieldName} can only contain letters, spaces, hyphens, and apostrophes`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Bio validation\nexport const validateBio = bio => {\n  if (!bio || !bio.trim()) {\n    return {\n      isValid: false,\n      error: 'Bio is required'\n    };\n  }\n  if (bio.trim().length > VALIDATION_RULES.BIO_MAX_LENGTH) {\n    return {\n      isValid: false,\n      error: `Bio must not exceed ${VALIDATION_RULES.BIO_MAX_LENGTH} characters`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Job title validation\nexport const validateJobTitle = title => {\n  if (!title || !title.trim()) {\n    return {\n      isValid: false,\n      error: 'Job title is required'\n    };\n  }\n  const trimmedTitle = title.trim();\n  if (trimmedTitle.length > VALIDATION_RULES.JOB_TITLE_MAX_LENGTH) {\n    return {\n      isValid: false,\n      error: `Job title must not exceed ${VALIDATION_RULES.JOB_TITLE_MAX_LENGTH} characters`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Job description validation\nexport const validateJobDescription = description => {\n  if (!description || !description.trim()) {\n    return {\n      isValid: false,\n      error: 'Job description is required'\n    };\n  }\n  if (description.trim().length > VALIDATION_RULES.JOB_DESCRIPTION_MAX_LENGTH) {\n    return {\n      isValid: false,\n      error: `Job description must not exceed ${VALIDATION_RULES.JOB_DESCRIPTION_MAX_LENGTH} characters`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Cover letter validation\nexport const validateCoverLetter = coverLetter => {\n  if (!coverLetter || !coverLetter.trim()) {\n    return {\n      isValid: false,\n      error: 'Cover letter is required'\n    };\n  }\n  if (coverLetter.trim().length > VALIDATION_RULES.COVER_LETTER_MAX_LENGTH) {\n    return {\n      isValid: false,\n      error: `Cover letter must not exceed ${VALIDATION_RULES.COVER_LETTER_MAX_LENGTH} characters`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Salary validation\nexport const validateSalary = salary => {\n  if (!salary || salary === '') {\n    return {\n      isValid: false,\n      error: 'Salary is required'\n    };\n  }\n  const numericSalary = typeof salary === 'string' ? parseFloat(salary) : salary;\n  if (isNaN(numericSalary) || numericSalary <= 0) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid salary amount'\n    };\n  }\n\n  // Maximum reasonable salary (in local currency)\n  if (numericSalary > 10000000) {\n    return {\n      isValid: false,\n      error: 'Salary amount seems too high'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Date validation\nexport const validateDate = (date, fieldName = 'Date') => {\n  if (!date) {\n    return {\n      isValid: false,\n      error: `${fieldName} is required`\n    };\n  }\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  if (isNaN(dateObj.getTime())) {\n    return {\n      isValid: false,\n      error: `Please enter a valid ${fieldName.toLowerCase()}`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Start date validation (must be future date)\nexport const validateStartDate = startDate => {\n  const dateValidation = validateDate(startDate, 'Start date');\n  if (!dateValidation.isValid) {\n    return dateValidation;\n  }\n  const dateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  if (dateObj < today) {\n    return {\n      isValid: false,\n      error: 'Start date cannot be in the past'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// End date validation (must be after start date)\nexport const validateEndDate = (endDate, startDate) => {\n  const dateValidation = validateDate(endDate, 'End date');\n  if (!dateValidation.isValid) {\n    return dateValidation;\n  }\n  const endDateObj = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const startDateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  if (endDateObj <= startDateObj) {\n    return {\n      isValid: false,\n      error: 'End date must be after start date'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Workers needed validation\nexport const validateWorkersNeeded = workersNeeded => {\n  if (!workersNeeded || workersNeeded === '') {\n    return {\n      isValid: false,\n      error: 'Number of workers needed is required'\n    };\n  }\n  const numericWorkers = typeof workersNeeded === 'string' ? parseInt(workersNeeded) : workersNeeded;\n  if (isNaN(numericWorkers) || numericWorkers < 1) {\n    return {\n      isValid: false,\n      error: 'Number of workers must be at least 1'\n    };\n  }\n  if (numericWorkers > 1000) {\n    return {\n      isValid: false,\n      error: 'Number of workers cannot exceed 1000'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// File validation\nexport const validateFile = (file, type) => {\n  if (!file) {\n    return {\n      isValid: false,\n      error: 'File is required'\n    };\n  }\n\n  // Check file size\n  if (file.size > VALIDATION_RULES.MAX_FILE_SIZE) {\n    return {\n      isValid: false,\n      error: 'File size is too large. Maximum size is 5MB'\n    };\n  }\n\n  // Check file type\n  const allowedTypes = type === 'image' ? VALIDATION_RULES.ALLOWED_IMAGE_TYPES : VALIDATION_RULES.ALLOWED_DOCUMENT_TYPES;\n  if (!allowedTypes.includes(file.type)) {\n    const typeNames = type === 'image' ? 'JPEG, PNG, or WebP' : 'PDF, DOC, or DOCX';\n    return {\n      isValid: false,\n      error: `Please select a valid ${typeNames} file`\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Location validation (African cities/regions)\nexport const validateLocation = location => {\n  if (!location || !location.trim()) {\n    return {\n      isValid: false,\n      error: 'Location is required'\n    };\n  }\n  const trimmedLocation = location.trim();\n  if (trimmedLocation.length < 2) {\n    return {\n      isValid: false,\n      error: 'Location must be at least 2 characters long'\n    };\n  }\n  if (trimmedLocation.length > 100) {\n    return {\n      isValid: false,\n      error: 'Location must not exceed 100 characters'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Skills validation\nexport const validateSkills = skills => {\n  if (!skills || skills.length === 0) {\n    return {\n      isValid: false,\n      error: 'At least one skill is required'\n    };\n  }\n  if (skills.length > 20) {\n    return {\n      isValid: false,\n      error: 'Maximum 20 skills allowed'\n    };\n  }\n\n  // Check each skill\n  for (const skill of skills) {\n    if (!skill || !skill.trim()) {\n      return {\n        isValid: false,\n        error: 'Skills cannot be empty'\n      };\n    }\n    if (skill.trim().length > 50) {\n      return {\n        isValid: false,\n        error: 'Each skill must not exceed 50 characters'\n      };\n    }\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Comprehensive form validation\nexport const validateLoginForm = data => {\n  const errors = [];\n  const emailResult = validateEmail(data.email);\n  if (!emailResult.isValid && emailResult.error) {\n    errors.push(emailResult.error);\n  }\n  if (!data.password) {\n    errors.push('Password is required');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\nexport const validateRegistrationForm = data => {\n  const errors = [];\n  const firstNameResult = validateName(data.firstName, 'First name');\n  if (!firstNameResult.isValid && firstNameResult.error) {\n    errors.push(firstNameResult.error);\n  }\n  const lastNameResult = validateName(data.lastName, 'Last name');\n  if (!lastNameResult.isValid && lastNameResult.error) {\n    errors.push(lastNameResult.error);\n  }\n  const emailResult = validateEmail(data.email);\n  if (!emailResult.isValid && emailResult.error) {\n    errors.push(emailResult.error);\n  }\n  const phoneResult = validatePhoneNumber(data.phoneNumber);\n  if (!phoneResult.isValid && phoneResult.error) {\n    errors.push(phoneResult.error);\n  }\n  const passwordResult = validatePassword(data.password);\n  if (!passwordResult.isValid && passwordResult.error) {\n    errors.push(passwordResult.error);\n  }\n  const confirmPasswordResult = validatePasswordConfirmation(data.password, data.confirmPassword);\n  if (!confirmPasswordResult.isValid && confirmPasswordResult.error) {\n    errors.push(confirmPasswordResult.error);\n  }\n  if (!data.userType || !['worker', 'employer'].includes(data.userType)) {\n    errors.push('Please select a valid user type');\n  }\n  const locationResult = validateLocation(data.location);\n  if (!locationResult.isValid && locationResult.error) {\n    errors.push(locationResult.error);\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\nexport const validateJobForm = data => {\n  const errors = [];\n  const titleResult = validateJobTitle(data.title);\n  if (!titleResult.isValid && titleResult.error) {\n    errors.push(titleResult.error);\n  }\n  const descriptionResult = validateJobDescription(data.description);\n  if (!descriptionResult.isValid && descriptionResult.error) {\n    errors.push(descriptionResult.error);\n  }\n  if (!data.category || !data.category.trim()) {\n    errors.push('Job category is required');\n  }\n  const locationResult = validateLocation(data.location);\n  if (!locationResult.isValid && locationResult.error) {\n    errors.push(locationResult.error);\n  }\n  const salaryResult = validateSalary(data.salary);\n  if (!salaryResult.isValid && salaryResult.error) {\n    errors.push(salaryResult.error);\n  }\n  if (!data.salaryType || !['daily', 'weekly', 'monthly', 'fixed'].includes(data.salaryType)) {\n    errors.push('Please select a valid salary type');\n  }\n  if (!data.jobType || !['temporary', 'seasonal', 'permanent'].includes(data.jobType)) {\n    errors.push('Please select a valid job type');\n  }\n  const startDateResult = validateStartDate(data.startDate);\n  if (!startDateResult.isValid && startDateResult.error) {\n    errors.push(startDateResult.error);\n  }\n  if (data.endDate) {\n    const endDateResult = validateEndDate(data.endDate, data.startDate);\n    if (!endDateResult.isValid && endDateResult.error) {\n      errors.push(endDateResult.error);\n    }\n  }\n  const workersResult = validateWorkersNeeded(data.workersNeeded);\n  if (!workersResult.isValid && workersResult.error) {\n    errors.push(workersResult.error);\n  }\n  const skillsResult = validateSkills(data.skills);\n  if (!skillsResult.isValid && skillsResult.error) {\n    errors.push(skillsResult.error);\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// URL validation\nexport const validateUrl = url => {\n  if (!url) {\n    return {\n      isValid: true\n    }; // URL is optional\n  }\n  try {\n    new URL(url);\n    return {\n      isValid: true\n    };\n  } catch {\n    return {\n      isValid: false,\n      error: 'Please enter a valid URL'\n    };\n  }\n};\n\n// Age validation (for user profiles)\nexport const validateAge = birthDate => {\n  if (!birthDate) {\n    return {\n      isValid: false,\n      error: 'Birth date is required'\n    };\n  }\n  const birthDateObj = typeof birthDate === 'string' ? new Date(birthDate) : birthDate;\n  const today = new Date();\n  const age = today.getFullYear() - birthDateObj.getFullYear();\n  const monthDiff = today.getMonth() - birthDateObj.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDateObj.getDate()) {\n    // Adjust age if birthday hasn't occurred this year\n  }\n  if (age < 16) {\n    return {\n      isValid: false,\n      error: 'You must be at least 16 years old to register'\n    };\n  }\n  if (age > 100) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid birth date'\n    };\n  }\n  return {\n    isValid: true\n  };\n};\n\n// Export all validators for easy access\nexport const validators = {\n  email: validateEmail,\n  password: validatePassword,\n  passwordConfirmation: validatePasswordConfirmation,\n  phoneNumber: validatePhoneNumber,\n  name: validateName,\n  bio: validateBio,\n  jobTitle: validateJobTitle,\n  jobDescription: validateJobDescription,\n  coverLetter: validateCoverLetter,\n  salary: validateSalary,\n  date: validateDate,\n  startDate: validateStartDate,\n  endDate: validateEndDate,\n  workersNeeded: validateWorkersNeeded,\n  file: validateFile,\n  location: validateLocation,\n  skills: validateSkills,\n  url: validateUrl,\n  age: validateAge,\n  forms: {\n    login: validateLoginForm,\n    registration: validateRegistrationForm,\n    job: validateJobForm\n  }\n};","map":{"version":3,"names":["VALIDATION_RULES","validateEmail","email","isValid","error","EMAIL_PATTERN","test","validatePassword","password","length","PASSWORD_MIN_LENGTH","validatePasswordConfirmation","confirmPassword","validatePhoneNumber","phoneNumber","country","cleanNumber","replace","patterns","KE","UG","TZ","RW","ET","GH","NG","ZA","generic","pattern","Object","values","some","validateName","name","fieldName","trim","trimmedName","NAME_MIN_LENGTH","NAME_MAX_LENGTH","validateBio","bio","BIO_MAX_LENGTH","validateJobTitle","title","trimmedTitle","JOB_TITLE_MAX_LENGTH","validateJobDescription","description","JOB_DESCRIPTION_MAX_LENGTH","validateCoverLetter","coverLetter","COVER_LETTER_MAX_LENGTH","validateSalary","salary","numericSalary","parseFloat","isNaN","validateDate","date","dateObj","Date","getTime","toLowerCase","validateStartDate","startDate","dateValidation","today","setHours","validateEndDate","endDate","endDateObj","startDateObj","validateWorkersNeeded","workersNeeded","numericWorkers","parseInt","validateFile","file","type","size","MAX_FILE_SIZE","allowedTypes","ALLOWED_IMAGE_TYPES","ALLOWED_DOCUMENT_TYPES","includes","typeNames","validateLocation","location","trimmedLocation","validateSkills","skills","skill","validateLoginForm","data","errors","emailResult","push","validateRegistrationForm","firstNameResult","firstName","lastNameResult","lastName","phoneResult","passwordResult","confirmPasswordResult","userType","locationResult","validateJobForm","titleResult","descriptionResult","category","salaryResult","salaryType","jobType","startDateResult","endDateResult","workersResult","skillsResult","validateUrl","url","URL","validateAge","birthDate","birthDateObj","age","getFullYear","monthDiff","getMonth","getDate","validators","passwordConfirmation","jobTitle","jobDescription","forms","login","registration","job"],"sources":["/home/sophie/farmwork-hub/client/src/utils/validators.ts"],"sourcesContent":["import { VALIDATION_RULES } from './constants';\n\n// Types for validation results\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\nexport interface FieldValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n// Job form data type\nexport interface JobFormData {\n  title: string;\n  description: string;\n  category: string;\n  location: string;\n  salary: number | string;\n  salaryType: string;\n  jobType: string;\n  startDate: string | Date;\n  endDate?: string | Date;\n  workersNeeded: number | string;\n  skills: string[];\n}\n\n// Email validation - supports international domains\nexport const validateEmail = (email: string): FieldValidationResult => {\n  if (!email) {\n    return { isValid: false, error: 'Email is required' };\n  }\n\n  if (!VALIDATION_RULES.EMAIL_PATTERN.test(email)) {\n    return { isValid: false, error: 'Please enter a valid email address' };\n  }\n\n  return { isValid: true };\n};\n\n// Password validation with strength requirements\nexport const validatePassword = (password: string): FieldValidationResult => {\n  if (!password) {\n    return { isValid: false, error: 'Password is required' };\n  }\n\n  if (password.length < VALIDATION_RULES.PASSWORD_MIN_LENGTH) {\n    return { \n      isValid: false, \n      error: `Password must be at least ${VALIDATION_RULES.PASSWORD_MIN_LENGTH} characters long` \n    };\n  }\n\n  // Check for at least one uppercase letter\n  if (!/[A-Z]/.test(password)) {\n    return { isValid: false, error: 'Password must contain at least one uppercase letter' };\n  }\n\n  // Check for at least one lowercase letter\n  if (!/[a-z]/.test(password)) {\n    return { isValid: false, error: 'Password must contain at least one lowercase letter' };\n  }\n\n  // Check for at least one number\n  if (!/\\d/.test(password)) {\n    return { isValid: false, error: 'Password must contain at least one number' };\n  }\n\n  return { isValid: true };\n};\n\n// Password confirmation validation\nexport const validatePasswordConfirmation = (\n  password: string, \n  confirmPassword: string\n): FieldValidationResult => {\n  if (!confirmPassword) {\n    return { isValid: false, error: 'Please confirm your password' };\n  }\n\n  if (password !== confirmPassword) {\n    return { isValid: false, error: 'Passwords do not match' };\n  }\n\n  return { isValid: true };\n};\n\n// African phone number validation - supports multiple countries\nexport const validatePhoneNumber = (phoneNumber: string, country?: string): FieldValidationResult => {\n  if (!phoneNumber) {\n    return { isValid: false, error: 'Phone number is required' };\n  }\n\n  // Remove spaces and special characters for validation\n  const cleanNumber = phoneNumber.replace(/[\\s\\-\\(\\)]/g, '');\n\n  // Country-specific patterns\n  const patterns = {\n    KE: /^(\\+254|0)(7|1)\\d{8}$/, // Kenya\n    UG: /^(\\+256|0)(7|3|4)\\d{8}$/, // Uganda\n    TZ: /^(\\+255|0)(7|6)\\d{8}$/, // Tanzania\n    RW: /^(\\+250|0)(7|2)\\d{8}$/, // Rwanda\n    ET: /^(\\+251|0)(9|7)\\d{8}$/, // Ethiopia\n    GH: /^(\\+233|0)(2|5)\\d{8}$/, // Ghana\n    NG: /^(\\+234|0)(7|8|9)\\d{9}$/, // Nigeria\n    ZA: /^(\\+27|0)(6|7|8)\\d{8}$/, // South Africa\n    // Generic African pattern for other countries\n    generic: /^(\\+\\d{1,3}|0)\\d{8,12}$/\n  };\n\n  // Use country-specific pattern if provided, otherwise try all patterns\n  if (country && patterns[country as keyof typeof patterns]) {\n    const pattern = patterns[country as keyof typeof patterns];\n    if (!pattern.test(cleanNumber)) {\n      return { isValid: false, error: 'Please enter a valid phone number for your country' };\n    }\n  } else {\n    // Try all patterns to see if any match\n    const isValid = Object.values(patterns).some(pattern => pattern.test(cleanNumber));\n    if (!isValid) {\n      return { isValid: false, error: 'Please enter a valid African phone number' };\n    }\n  }\n\n  return { isValid: true };\n};\n\n// Name validation\nexport const validateName = (name: string, fieldName: string = 'Name'): FieldValidationResult => {\n  if (!name || !name.trim()) {\n    return { isValid: false, error: `${fieldName} is required` };\n  }\n\n  const trimmedName = name.trim();\n\n  if (trimmedName.length < VALIDATION_RULES.NAME_MIN_LENGTH) {\n    return { \n      isValid: false, \n      error: `${fieldName} must be at least ${VALIDATION_RULES.NAME_MIN_LENGTH} characters long` \n    };\n  }\n\n  if (trimmedName.length > VALIDATION_RULES.NAME_MAX_LENGTH) {\n    return { \n      isValid: false, \n      error: `${fieldName} must not exceed ${VALIDATION_RULES.NAME_MAX_LENGTH} characters` \n    };\n  }\n\n  // Allow letters, spaces, hyphens, and apostrophes (for African names)\n  if (!/^[a-zA-Z\\s\\-']+$/.test(trimmedName)) {\n    return { isValid: false, error: `${fieldName} can only contain letters, spaces, hyphens, and apostrophes` };\n  }\n\n  return { isValid: true };\n};\n\n// Bio validation\nexport const validateBio = (bio: string): FieldValidationResult => {\n  if (!bio || !bio.trim()) {\n    return { isValid: false, error: 'Bio is required' };\n  }\n\n  if (bio.trim().length > VALIDATION_RULES.BIO_MAX_LENGTH) {\n    return { \n      isValid: false, \n      error: `Bio must not exceed ${VALIDATION_RULES.BIO_MAX_LENGTH} characters` \n    };\n  }\n\n  return { isValid: true };\n};\n\n// Job title validation\nexport const validateJobTitle = (title: string): FieldValidationResult => {\n  if (!title || !title.trim()) {\n    return { isValid: false, error: 'Job title is required' };\n  }\n\n  const trimmedTitle = title.trim();\n\n  if (trimmedTitle.length > VALIDATION_RULES.JOB_TITLE_MAX_LENGTH) {\n    return { \n      isValid: false, \n      error: `Job title must not exceed ${VALIDATION_RULES.JOB_TITLE_MAX_LENGTH} characters` \n    };\n  }\n\n  return { isValid: true };\n};\n\n// Job description validation\nexport const validateJobDescription = (description: string): FieldValidationResult => {\n  if (!description || !description.trim()) {\n    return { isValid: false, error: 'Job description is required' };\n  }\n\n  if (description.trim().length > VALIDATION_RULES.JOB_DESCRIPTION_MAX_LENGTH) {\n    return { \n      isValid: false, \n      error: `Job description must not exceed ${VALIDATION_RULES.JOB_DESCRIPTION_MAX_LENGTH} characters` \n    };\n  }\n\n  return { isValid: true };\n};\n\n// Cover letter validation\nexport const validateCoverLetter = (coverLetter: string): FieldValidationResult => {\n  if (!coverLetter || !coverLetter.trim()) {\n    return { isValid: false, error: 'Cover letter is required' };\n  }\n\n  if (coverLetter.trim().length > VALIDATION_RULES.COVER_LETTER_MAX_LENGTH) {\n    return { \n      isValid: false, \n      error: `Cover letter must not exceed ${VALIDATION_RULES.COVER_LETTER_MAX_LENGTH} characters` \n    };\n  }\n\n  return { isValid: true };\n};\n\n// Salary validation\nexport const validateSalary = (salary: number | string): FieldValidationResult => {\n  if (!salary || salary === '') {\n    return { isValid: false, error: 'Salary is required' };\n  }\n\n  const numericSalary = typeof salary === 'string' ? parseFloat(salary) : salary;\n\n  if (isNaN(numericSalary) || numericSalary <= 0) {\n    return { isValid: false, error: 'Please enter a valid salary amount' };\n  }\n\n  // Maximum reasonable salary (in local currency)\n  if (numericSalary > 10000000) {\n    return { isValid: false, error: 'Salary amount seems too high' };\n  }\n\n  return { isValid: true };\n};\n\n// Date validation\nexport const validateDate = (date: string | Date, fieldName: string = 'Date'): FieldValidationResult => {\n  if (!date) {\n    return { isValid: false, error: `${fieldName} is required` };\n  }\n\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n\n  if (isNaN(dateObj.getTime())) {\n    return { isValid: false, error: `Please enter a valid ${fieldName.toLowerCase()}` };\n  }\n\n  return { isValid: true };\n};\n\n// Start date validation (must be future date)\nexport const validateStartDate = (startDate: string | Date): FieldValidationResult => {\n  const dateValidation = validateDate(startDate, 'Start date');\n  if (!dateValidation.isValid) {\n    return dateValidation;\n  }\n\n  const dateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  if (dateObj < today) {\n    return { isValid: false, error: 'Start date cannot be in the past' };\n  }\n\n  return { isValid: true };\n};\n\n// End date validation (must be after start date)\nexport const validateEndDate = (endDate: string | Date, startDate: string | Date): FieldValidationResult => {\n  const dateValidation = validateDate(endDate, 'End date');\n  if (!dateValidation.isValid) {\n    return dateValidation;\n  }\n\n  const endDateObj = typeof endDate === 'string' ? new Date(endDate) : endDate;\n  const startDateObj = typeof startDate === 'string' ? new Date(startDate) : startDate;\n\n  if (endDateObj <= startDateObj) {\n    return { isValid: false, error: 'End date must be after start date' };\n  }\n\n  return { isValid: true };\n};\n\n// Workers needed validation\nexport const validateWorkersNeeded = (workersNeeded: number | string): FieldValidationResult => {\n  if (!workersNeeded || workersNeeded === '') {\n    return { isValid: false, error: 'Number of workers needed is required' };\n  }\n\n  const numericWorkers = typeof workersNeeded === 'string' ? parseInt(workersNeeded) : workersNeeded;\n\n  if (isNaN(numericWorkers) || numericWorkers < 1) {\n    return { isValid: false, error: 'Number of workers must be at least 1' };\n  }\n\n  if (numericWorkers > 1000) {\n    return { isValid: false, error: 'Number of workers cannot exceed 1000' };\n  }\n\n  return { isValid: true };\n};\n\n// File validation\nexport const validateFile = (file: File, type: 'image' | 'document'): FieldValidationResult => {\n  if (!file) {\n    return { isValid: false, error: 'File is required' };\n  }\n\n  // Check file size\n  if (file.size > VALIDATION_RULES.MAX_FILE_SIZE) {\n    return { isValid: false, error: 'File size is too large. Maximum size is 5MB' };\n  }\n\n  // Check file type\n  const allowedTypes = type === 'image' \n    ? VALIDATION_RULES.ALLOWED_IMAGE_TYPES \n    : VALIDATION_RULES.ALLOWED_DOCUMENT_TYPES;\n\n  if (!allowedTypes.includes(file.type)) {\n    const typeNames = type === 'image' ? 'JPEG, PNG, or WebP' : 'PDF, DOC, or DOCX';\n    return { isValid: false, error: `Please select a valid ${typeNames} file` };\n  }\n\n  return { isValid: true };\n};\n\n// Location validation (African cities/regions)\nexport const validateLocation = (location: string): FieldValidationResult => {\n  if (!location || !location.trim()) {\n    return { isValid: false, error: 'Location is required' };\n  }\n\n  const trimmedLocation = location.trim();\n\n  if (trimmedLocation.length < 2) {\n    return { isValid: false, error: 'Location must be at least 2 characters long' };\n  }\n\n  if (trimmedLocation.length > 100) {\n    return { isValid: false, error: 'Location must not exceed 100 characters' };\n  }\n\n  return { isValid: true };\n};\n\n// Skills validation\nexport const validateSkills = (skills: string[]): FieldValidationResult => {\n  if (!skills || skills.length === 0) {\n    return { isValid: false, error: 'At least one skill is required' };\n  }\n\n  if (skills.length > 20) {\n    return { isValid: false, error: 'Maximum 20 skills allowed' };\n  }\n\n  // Check each skill\n  for (const skill of skills) {\n    if (!skill || !skill.trim()) {\n      return { isValid: false, error: 'Skills cannot be empty' };\n    }\n\n    if (skill.trim().length > 50) {\n      return { isValid: false, error: 'Each skill must not exceed 50 characters' };\n    }\n  }\n\n  return { isValid: true };\n};\n\n// Comprehensive form validation\nexport const validateLoginForm = (data: { email: string; password: string }): ValidationResult => {\n  const errors: string[] = [];\n\n  const emailResult = validateEmail(data.email);\n  if (!emailResult.isValid && emailResult.error) {\n    errors.push(emailResult.error);\n  }\n\n  if (!data.password) {\n    errors.push('Password is required');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\nexport const validateRegistrationForm = (data: {\n  firstName: string;\n  lastName: string;\n  email: string;\n  phoneNumber: string;\n  password: string;\n  confirmPassword: string;\n  userType: string;\n  location: string;\n}): ValidationResult => {\n  const errors: string[] = [];\n\n  const firstNameResult = validateName(data.firstName, 'First name');\n  if (!firstNameResult.isValid && firstNameResult.error) {\n    errors.push(firstNameResult.error);\n  }\n\n  const lastNameResult = validateName(data.lastName, 'Last name');\n  if (!lastNameResult.isValid && lastNameResult.error) {\n    errors.push(lastNameResult.error);\n  }\n\n  const emailResult = validateEmail(data.email);\n  if (!emailResult.isValid && emailResult.error) {\n    errors.push(emailResult.error);\n  }\n\n  const phoneResult = validatePhoneNumber(data.phoneNumber);\n  if (!phoneResult.isValid && phoneResult.error) {\n    errors.push(phoneResult.error);\n  }\n\n  const passwordResult = validatePassword(data.password);\n  if (!passwordResult.isValid && passwordResult.error) {\n    errors.push(passwordResult.error);\n  }\n\n  const confirmPasswordResult = validatePasswordConfirmation(data.password, data.confirmPassword);\n  if (!confirmPasswordResult.isValid && confirmPasswordResult.error) {\n    errors.push(confirmPasswordResult.error);\n  }\n\n  if (!data.userType || !['worker', 'employer'].includes(data.userType)) {\n    errors.push('Please select a valid user type');\n  }\n\n  const locationResult = validateLocation(data.location);\n  if (!locationResult.isValid && locationResult.error) {\n    errors.push(locationResult.error);\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\nexport const validateJobForm = (data: JobFormData): ValidationResult => {\n  const errors: string[] = [];\n\n  const titleResult = validateJobTitle(data.title);\n  if (!titleResult.isValid && titleResult.error) {\n    errors.push(titleResult.error);\n  }\n\n  const descriptionResult = validateJobDescription(data.description);\n  if (!descriptionResult.isValid && descriptionResult.error) {\n    errors.push(descriptionResult.error);\n  }\n\n  if (!data.category || !data.category.trim()) {\n    errors.push('Job category is required');\n  }\n\n  const locationResult = validateLocation(data.location);\n  if (!locationResult.isValid && locationResult.error) {\n    errors.push(locationResult.error);\n  }\n\n  const salaryResult = validateSalary(data.salary);\n  if (!salaryResult.isValid && salaryResult.error) {\n    errors.push(salaryResult.error);\n  }\n\n  if (!data.salaryType || !['daily', 'weekly', 'monthly', 'fixed'].includes(data.salaryType)) {\n    errors.push('Please select a valid salary type');\n  }\n\n  if (!data.jobType || !['temporary', 'seasonal', 'permanent'].includes(data.jobType)) {\n    errors.push('Please select a valid job type');\n  }\n\n  const startDateResult = validateStartDate(data.startDate);\n  if (!startDateResult.isValid && startDateResult.error) {\n    errors.push(startDateResult.error);\n  }\n\n  if (data.endDate) {\n    const endDateResult = validateEndDate(data.endDate, data.startDate);\n    if (!endDateResult.isValid && endDateResult.error) {\n      errors.push(endDateResult.error);\n    }\n  }\n\n  const workersResult = validateWorkersNeeded(data.workersNeeded);\n  if (!workersResult.isValid && workersResult.error) {\n    errors.push(workersResult.error);\n  }\n\n  const skillsResult = validateSkills(data.skills);\n  if (!skillsResult.isValid && skillsResult.error) {\n    errors.push(skillsResult.error);\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// URL validation\nexport const validateUrl = (url: string): FieldValidationResult => {\n  if (!url) {\n    return { isValid: true }; // URL is optional\n  }\n\n  try {\n    new URL(url);\n    return { isValid: true };\n  } catch {\n    return { isValid: false, error: 'Please enter a valid URL' };\n  }\n};\n\n// Age validation (for user profiles)\nexport const validateAge = (birthDate: string | Date): FieldValidationResult => {\n  if (!birthDate) {\n    return { isValid: false, error: 'Birth date is required' };\n  }\n\n  const birthDateObj = typeof birthDate === 'string' ? new Date(birthDate) : birthDate;\n  const today = new Date();\n  const age = today.getFullYear() - birthDateObj.getFullYear();\n  const monthDiff = today.getMonth() - birthDateObj.getMonth();\n\n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDateObj.getDate())) {\n    // Adjust age if birthday hasn't occurred this year\n  }\n\n  if (age < 16) {\n    return { isValid: false, error: 'You must be at least 16 years old to register' };\n  }\n\n  if (age > 100) {\n    return { isValid: false, error: 'Please enter a valid birth date' };\n  }\n\n  return { isValid: true };\n};\n\n// Export all validators for easy access\nexport const validators = {\n  email: validateEmail,\n  password: validatePassword,\n  passwordConfirmation: validatePasswordConfirmation,\n  phoneNumber: validatePhoneNumber,\n  name: validateName,\n  bio: validateBio,\n  jobTitle: validateJobTitle,\n  jobDescription: validateJobDescription,\n  coverLetter: validateCoverLetter,\n  salary: validateSalary,\n  date: validateDate,\n  startDate: validateStartDate,\n  endDate: validateEndDate,\n  workersNeeded: validateWorkersNeeded,\n  file: validateFile,\n  location: validateLocation,\n  skills: validateSkills,\n  url: validateUrl,\n  age: validateAge,\n  forms: {\n    login: validateLoginForm,\n    registration: validateRegistrationForm,\n    job: validateJobForm,\n  }\n};"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,aAAa;;AAE9C;;AAWA;;AAeA;AACA,OAAO,MAAMC,aAAa,GAAIC,KAAa,IAA4B;EACrE,IAAI,CAACA,KAAK,EAAE;IACV,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAoB,CAAC;EACvD;EAEA,IAAI,CAACJ,gBAAgB,CAACK,aAAa,CAACC,IAAI,CAACJ,KAAK,CAAC,EAAE;IAC/C,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAqC,CAAC;EACxE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMI,gBAAgB,GAAIC,QAAgB,IAA4B;EAC3E,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO;MAAEL,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAuB,CAAC;EAC1D;EAEA,IAAII,QAAQ,CAACC,MAAM,GAAGT,gBAAgB,CAACU,mBAAmB,EAAE;IAC1D,OAAO;MACLP,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,6BAA6BJ,gBAAgB,CAACU,mBAAmB;IAC1E,CAAC;EACH;;EAEA;EACA,IAAI,CAAC,OAAO,CAACJ,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC3B,OAAO;MAAEL,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAsD,CAAC;EACzF;;EAEA;EACA,IAAI,CAAC,OAAO,CAACE,IAAI,CAACE,QAAQ,CAAC,EAAE;IAC3B,OAAO;MAAEL,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAsD,CAAC;EACzF;;EAEA;EACA,IAAI,CAAC,IAAI,CAACE,IAAI,CAACE,QAAQ,CAAC,EAAE;IACxB,OAAO;MAAEL,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA4C,CAAC;EAC/E;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMQ,4BAA4B,GAAGA,CAC1CH,QAAgB,EAChBI,eAAuB,KACG;EAC1B,IAAI,CAACA,eAAe,EAAE;IACpB,OAAO;MAAET,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA+B,CAAC;EAClE;EAEA,IAAII,QAAQ,KAAKI,eAAe,EAAE;IAChC,OAAO;MAAET,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAyB,CAAC;EAC5D;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMU,mBAAmB,GAAGA,CAACC,WAAmB,EAAEC,OAAgB,KAA4B;EACnG,IAAI,CAACD,WAAW,EAAE;IAChB,OAAO;MAAEX,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA2B,CAAC;EAC9D;;EAEA;EACA,MAAMY,WAAW,GAAGF,WAAW,CAACG,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;;EAE1D;EACA,MAAMC,QAAQ,GAAG;IACfC,EAAE,EAAE,uBAAuB;IAAE;IAC7BC,EAAE,EAAE,yBAAyB;IAAE;IAC/BC,EAAE,EAAE,uBAAuB;IAAE;IAC7BC,EAAE,EAAE,uBAAuB;IAAE;IAC7BC,EAAE,EAAE,uBAAuB;IAAE;IAC7BC,EAAE,EAAE,uBAAuB;IAAE;IAC7BC,EAAE,EAAE,yBAAyB;IAAE;IAC/BC,EAAE,EAAE,wBAAwB;IAAE;IAC9B;IACAC,OAAO,EAAE;EACX,CAAC;;EAED;EACA,IAAIZ,OAAO,IAAIG,QAAQ,CAACH,OAAO,CAA0B,EAAE;IACzD,MAAMa,OAAO,GAAGV,QAAQ,CAACH,OAAO,CAA0B;IAC1D,IAAI,CAACa,OAAO,CAACtB,IAAI,CAACU,WAAW,CAAC,EAAE;MAC9B,OAAO;QAAEb,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAqD,CAAC;IACxF;EACF,CAAC,MAAM;IACL;IACA,MAAMD,OAAO,GAAG0B,MAAM,CAACC,MAAM,CAACZ,QAAQ,CAAC,CAACa,IAAI,CAACH,OAAO,IAAIA,OAAO,CAACtB,IAAI,CAACU,WAAW,CAAC,CAAC;IAClF,IAAI,CAACb,OAAO,EAAE;MACZ,OAAO;QAAEA,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAA4C,CAAC;IAC/E;EACF;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAM6B,YAAY,GAAGA,CAACC,IAAY,EAAEC,SAAiB,GAAG,MAAM,KAA4B;EAC/F,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACE,IAAI,CAAC,CAAC,EAAE;IACzB,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG8B,SAAS;IAAe,CAAC;EAC9D;EAEA,MAAME,WAAW,GAAGH,IAAI,CAACE,IAAI,CAAC,CAAC;EAE/B,IAAIC,WAAW,CAAC3B,MAAM,GAAGT,gBAAgB,CAACqC,eAAe,EAAE;IACzD,OAAO;MACLlC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,GAAG8B,SAAS,qBAAqBlC,gBAAgB,CAACqC,eAAe;IAC1E,CAAC;EACH;EAEA,IAAID,WAAW,CAAC3B,MAAM,GAAGT,gBAAgB,CAACsC,eAAe,EAAE;IACzD,OAAO;MACLnC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,GAAG8B,SAAS,oBAAoBlC,gBAAgB,CAACsC,eAAe;IACzE,CAAC;EACH;;EAEA;EACA,IAAI,CAAC,kBAAkB,CAAChC,IAAI,CAAC8B,WAAW,CAAC,EAAE;IACzC,OAAO;MAAEjC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG8B,SAAS;IAA8D,CAAC;EAC7G;EAEA,OAAO;IAAE/B,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMoC,WAAW,GAAIC,GAAW,IAA4B;EACjE,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACL,IAAI,CAAC,CAAC,EAAE;IACvB,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAkB,CAAC;EACrD;EAEA,IAAIoC,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC1B,MAAM,GAAGT,gBAAgB,CAACyC,cAAc,EAAE;IACvD,OAAO;MACLtC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,uBAAuBJ,gBAAgB,CAACyC,cAAc;IAC/D,CAAC;EACH;EAEA,OAAO;IAAEtC,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMuC,gBAAgB,GAAIC,KAAa,IAA4B;EACxE,IAAI,CAACA,KAAK,IAAI,CAACA,KAAK,CAACR,IAAI,CAAC,CAAC,EAAE;IAC3B,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAwB,CAAC;EAC3D;EAEA,MAAMwC,YAAY,GAAGD,KAAK,CAACR,IAAI,CAAC,CAAC;EAEjC,IAAIS,YAAY,CAACnC,MAAM,GAAGT,gBAAgB,CAAC6C,oBAAoB,EAAE;IAC/D,OAAO;MACL1C,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,6BAA6BJ,gBAAgB,CAAC6C,oBAAoB;IAC3E,CAAC;EACH;EAEA,OAAO;IAAE1C,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAM2C,sBAAsB,GAAIC,WAAmB,IAA4B;EACpF,IAAI,CAACA,WAAW,IAAI,CAACA,WAAW,CAACZ,IAAI,CAAC,CAAC,EAAE;IACvC,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA8B,CAAC;EACjE;EAEA,IAAI2C,WAAW,CAACZ,IAAI,CAAC,CAAC,CAAC1B,MAAM,GAAGT,gBAAgB,CAACgD,0BAA0B,EAAE;IAC3E,OAAO;MACL7C,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,mCAAmCJ,gBAAgB,CAACgD,0BAA0B;IACvF,CAAC;EACH;EAEA,OAAO;IAAE7C,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAM8C,mBAAmB,GAAIC,WAAmB,IAA4B;EACjF,IAAI,CAACA,WAAW,IAAI,CAACA,WAAW,CAACf,IAAI,CAAC,CAAC,EAAE;IACvC,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA2B,CAAC;EAC9D;EAEA,IAAI8C,WAAW,CAACf,IAAI,CAAC,CAAC,CAAC1B,MAAM,GAAGT,gBAAgB,CAACmD,uBAAuB,EAAE;IACxE,OAAO;MACLhD,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,gCAAgCJ,gBAAgB,CAACmD,uBAAuB;IACjF,CAAC;EACH;EAEA,OAAO;IAAEhD,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMiD,cAAc,GAAIC,MAAuB,IAA4B;EAChF,IAAI,CAACA,MAAM,IAAIA,MAAM,KAAK,EAAE,EAAE;IAC5B,OAAO;MAAElD,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAqB,CAAC;EACxD;EAEA,MAAMkD,aAAa,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGE,UAAU,CAACF,MAAM,CAAC,GAAGA,MAAM;EAE9E,IAAIG,KAAK,CAACF,aAAa,CAAC,IAAIA,aAAa,IAAI,CAAC,EAAE;IAC9C,OAAO;MAAEnD,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAqC,CAAC;EACxE;;EAEA;EACA,IAAIkD,aAAa,GAAG,QAAQ,EAAE;IAC5B,OAAO;MAAEnD,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA+B,CAAC;EAClE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMsD,YAAY,GAAGA,CAACC,IAAmB,EAAExB,SAAiB,GAAG,MAAM,KAA4B;EACtG,IAAI,CAACwB,IAAI,EAAE;IACT,OAAO;MAAEvD,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG8B,SAAS;IAAe,CAAC;EAC9D;EAEA,MAAMyB,OAAO,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAG,IAAIE,IAAI,CAACF,IAAI,CAAC,GAAGA,IAAI;EAEhE,IAAIF,KAAK,CAACG,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;IAC5B,OAAO;MAAE1D,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,wBAAwB8B,SAAS,CAAC4B,WAAW,CAAC,CAAC;IAAG,CAAC;EACrF;EAEA,OAAO;IAAE3D,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAM4D,iBAAiB,GAAIC,SAAwB,IAA4B;EACpF,MAAMC,cAAc,GAAGR,YAAY,CAACO,SAAS,EAAE,YAAY,CAAC;EAC5D,IAAI,CAACC,cAAc,CAAC9D,OAAO,EAAE;IAC3B,OAAO8D,cAAc;EACvB;EAEA,MAAMN,OAAO,GAAG,OAAOK,SAAS,KAAK,QAAQ,GAAG,IAAIJ,IAAI,CAACI,SAAS,CAAC,GAAGA,SAAS;EAC/E,MAAME,KAAK,GAAG,IAAIN,IAAI,CAAC,CAAC;EACxBM,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE1B,IAAIR,OAAO,GAAGO,KAAK,EAAE;IACnB,OAAO;MAAE/D,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAmC,CAAC;EACtE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMiE,eAAe,GAAGA,CAACC,OAAsB,EAAEL,SAAwB,KAA4B;EAC1G,MAAMC,cAAc,GAAGR,YAAY,CAACY,OAAO,EAAE,UAAU,CAAC;EACxD,IAAI,CAACJ,cAAc,CAAC9D,OAAO,EAAE;IAC3B,OAAO8D,cAAc;EACvB;EAEA,MAAMK,UAAU,GAAG,OAAOD,OAAO,KAAK,QAAQ,GAAG,IAAIT,IAAI,CAACS,OAAO,CAAC,GAAGA,OAAO;EAC5E,MAAME,YAAY,GAAG,OAAOP,SAAS,KAAK,QAAQ,GAAG,IAAIJ,IAAI,CAACI,SAAS,CAAC,GAAGA,SAAS;EAEpF,IAAIM,UAAU,IAAIC,YAAY,EAAE;IAC9B,OAAO;MAAEpE,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAoC,CAAC;EACvE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMqE,qBAAqB,GAAIC,aAA8B,IAA4B;EAC9F,IAAI,CAACA,aAAa,IAAIA,aAAa,KAAK,EAAE,EAAE;IAC1C,OAAO;MAAEtE,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAuC,CAAC;EAC1E;EAEA,MAAMsE,cAAc,GAAG,OAAOD,aAAa,KAAK,QAAQ,GAAGE,QAAQ,CAACF,aAAa,CAAC,GAAGA,aAAa;EAElG,IAAIjB,KAAK,CAACkB,cAAc,CAAC,IAAIA,cAAc,GAAG,CAAC,EAAE;IAC/C,OAAO;MAAEvE,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAuC,CAAC;EAC1E;EAEA,IAAIsE,cAAc,GAAG,IAAI,EAAE;IACzB,OAAO;MAAEvE,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAuC,CAAC;EAC1E;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMyE,YAAY,GAAGA,CAACC,IAAU,EAAEC,IAA0B,KAA4B;EAC7F,IAAI,CAACD,IAAI,EAAE;IACT,OAAO;MAAE1E,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAmB,CAAC;EACtD;;EAEA;EACA,IAAIyE,IAAI,CAACE,IAAI,GAAG/E,gBAAgB,CAACgF,aAAa,EAAE;IAC9C,OAAO;MAAE7E,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA8C,CAAC;EACjF;;EAEA;EACA,MAAM6E,YAAY,GAAGH,IAAI,KAAK,OAAO,GACjC9E,gBAAgB,CAACkF,mBAAmB,GACpClF,gBAAgB,CAACmF,sBAAsB;EAE3C,IAAI,CAACF,YAAY,CAACG,QAAQ,CAACP,IAAI,CAACC,IAAI,CAAC,EAAE;IACrC,MAAMO,SAAS,GAAGP,IAAI,KAAK,OAAO,GAAG,oBAAoB,GAAG,mBAAmB;IAC/E,OAAO;MAAE3E,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE,yBAAyBiF,SAAS;IAAQ,CAAC;EAC7E;EAEA,OAAO;IAAElF,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMmF,gBAAgB,GAAIC,QAAgB,IAA4B;EAC3E,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACpD,IAAI,CAAC,CAAC,EAAE;IACjC,OAAO;MAAEhC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAuB,CAAC;EAC1D;EAEA,MAAMoF,eAAe,GAAGD,QAAQ,CAACpD,IAAI,CAAC,CAAC;EAEvC,IAAIqD,eAAe,CAAC/E,MAAM,GAAG,CAAC,EAAE;IAC9B,OAAO;MAAEN,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA8C,CAAC;EACjF;EAEA,IAAIoF,eAAe,CAAC/E,MAAM,GAAG,GAAG,EAAE;IAChC,OAAO;MAAEN,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA0C,CAAC;EAC7E;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMsF,cAAc,GAAIC,MAAgB,IAA4B;EACzE,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACjF,MAAM,KAAK,CAAC,EAAE;IAClC,OAAO;MAAEN,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAiC,CAAC;EACpE;EAEA,IAAIsF,MAAM,CAACjF,MAAM,GAAG,EAAE,EAAE;IACtB,OAAO;MAAEN,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA4B,CAAC;EAC/D;;EAEA;EACA,KAAK,MAAMuF,KAAK,IAAID,MAAM,EAAE;IAC1B,IAAI,CAACC,KAAK,IAAI,CAACA,KAAK,CAACxD,IAAI,CAAC,CAAC,EAAE;MAC3B,OAAO;QAAEhC,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAyB,CAAC;IAC5D;IAEA,IAAIuF,KAAK,CAACxD,IAAI,CAAC,CAAC,CAAC1B,MAAM,GAAG,EAAE,EAAE;MAC5B,OAAO;QAAEN,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAA2C,CAAC;IAC9E;EACF;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMyF,iBAAiB,GAAIC,IAAyC,IAAuB;EAChG,MAAMC,MAAgB,GAAG,EAAE;EAE3B,MAAMC,WAAW,GAAG9F,aAAa,CAAC4F,IAAI,CAAC3F,KAAK,CAAC;EAC7C,IAAI,CAAC6F,WAAW,CAAC5F,OAAO,IAAI4F,WAAW,CAAC3F,KAAK,EAAE;IAC7C0F,MAAM,CAACE,IAAI,CAACD,WAAW,CAAC3F,KAAK,CAAC;EAChC;EAEA,IAAI,CAACyF,IAAI,CAACrF,QAAQ,EAAE;IAClBsF,MAAM,CAACE,IAAI,CAAC,sBAAsB,CAAC;EACrC;EAEA,OAAO;IACL7F,OAAO,EAAE2F,MAAM,CAACrF,MAAM,KAAK,CAAC;IAC5BqF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,wBAAwB,GAAIJ,IASxC,IAAuB;EACtB,MAAMC,MAAgB,GAAG,EAAE;EAE3B,MAAMI,eAAe,GAAGlE,YAAY,CAAC6D,IAAI,CAACM,SAAS,EAAE,YAAY,CAAC;EAClE,IAAI,CAACD,eAAe,CAAC/F,OAAO,IAAI+F,eAAe,CAAC9F,KAAK,EAAE;IACrD0F,MAAM,CAACE,IAAI,CAACE,eAAe,CAAC9F,KAAK,CAAC;EACpC;EAEA,MAAMgG,cAAc,GAAGpE,YAAY,CAAC6D,IAAI,CAACQ,QAAQ,EAAE,WAAW,CAAC;EAC/D,IAAI,CAACD,cAAc,CAACjG,OAAO,IAAIiG,cAAc,CAAChG,KAAK,EAAE;IACnD0F,MAAM,CAACE,IAAI,CAACI,cAAc,CAAChG,KAAK,CAAC;EACnC;EAEA,MAAM2F,WAAW,GAAG9F,aAAa,CAAC4F,IAAI,CAAC3F,KAAK,CAAC;EAC7C,IAAI,CAAC6F,WAAW,CAAC5F,OAAO,IAAI4F,WAAW,CAAC3F,KAAK,EAAE;IAC7C0F,MAAM,CAACE,IAAI,CAACD,WAAW,CAAC3F,KAAK,CAAC;EAChC;EAEA,MAAMkG,WAAW,GAAGzF,mBAAmB,CAACgF,IAAI,CAAC/E,WAAW,CAAC;EACzD,IAAI,CAACwF,WAAW,CAACnG,OAAO,IAAImG,WAAW,CAAClG,KAAK,EAAE;IAC7C0F,MAAM,CAACE,IAAI,CAACM,WAAW,CAAClG,KAAK,CAAC;EAChC;EAEA,MAAMmG,cAAc,GAAGhG,gBAAgB,CAACsF,IAAI,CAACrF,QAAQ,CAAC;EACtD,IAAI,CAAC+F,cAAc,CAACpG,OAAO,IAAIoG,cAAc,CAACnG,KAAK,EAAE;IACnD0F,MAAM,CAACE,IAAI,CAACO,cAAc,CAACnG,KAAK,CAAC;EACnC;EAEA,MAAMoG,qBAAqB,GAAG7F,4BAA4B,CAACkF,IAAI,CAACrF,QAAQ,EAAEqF,IAAI,CAACjF,eAAe,CAAC;EAC/F,IAAI,CAAC4F,qBAAqB,CAACrG,OAAO,IAAIqG,qBAAqB,CAACpG,KAAK,EAAE;IACjE0F,MAAM,CAACE,IAAI,CAACQ,qBAAqB,CAACpG,KAAK,CAAC;EAC1C;EAEA,IAAI,CAACyF,IAAI,CAACY,QAAQ,IAAI,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAACrB,QAAQ,CAACS,IAAI,CAACY,QAAQ,CAAC,EAAE;IACrEX,MAAM,CAACE,IAAI,CAAC,iCAAiC,CAAC;EAChD;EAEA,MAAMU,cAAc,GAAGpB,gBAAgB,CAACO,IAAI,CAACN,QAAQ,CAAC;EACtD,IAAI,CAACmB,cAAc,CAACvG,OAAO,IAAIuG,cAAc,CAACtG,KAAK,EAAE;IACnD0F,MAAM,CAACE,IAAI,CAACU,cAAc,CAACtG,KAAK,CAAC;EACnC;EAEA,OAAO;IACLD,OAAO,EAAE2F,MAAM,CAACrF,MAAM,KAAK,CAAC;IAC5BqF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,eAAe,GAAId,IAAiB,IAAuB;EACtE,MAAMC,MAAgB,GAAG,EAAE;EAE3B,MAAMc,WAAW,GAAGlE,gBAAgB,CAACmD,IAAI,CAAClD,KAAK,CAAC;EAChD,IAAI,CAACiE,WAAW,CAACzG,OAAO,IAAIyG,WAAW,CAACxG,KAAK,EAAE;IAC7C0F,MAAM,CAACE,IAAI,CAACY,WAAW,CAACxG,KAAK,CAAC;EAChC;EAEA,MAAMyG,iBAAiB,GAAG/D,sBAAsB,CAAC+C,IAAI,CAAC9C,WAAW,CAAC;EAClE,IAAI,CAAC8D,iBAAiB,CAAC1G,OAAO,IAAI0G,iBAAiB,CAACzG,KAAK,EAAE;IACzD0F,MAAM,CAACE,IAAI,CAACa,iBAAiB,CAACzG,KAAK,CAAC;EACtC;EAEA,IAAI,CAACyF,IAAI,CAACiB,QAAQ,IAAI,CAACjB,IAAI,CAACiB,QAAQ,CAAC3E,IAAI,CAAC,CAAC,EAAE;IAC3C2D,MAAM,CAACE,IAAI,CAAC,0BAA0B,CAAC;EACzC;EAEA,MAAMU,cAAc,GAAGpB,gBAAgB,CAACO,IAAI,CAACN,QAAQ,CAAC;EACtD,IAAI,CAACmB,cAAc,CAACvG,OAAO,IAAIuG,cAAc,CAACtG,KAAK,EAAE;IACnD0F,MAAM,CAACE,IAAI,CAACU,cAAc,CAACtG,KAAK,CAAC;EACnC;EAEA,MAAM2G,YAAY,GAAG3D,cAAc,CAACyC,IAAI,CAACxC,MAAM,CAAC;EAChD,IAAI,CAAC0D,YAAY,CAAC5G,OAAO,IAAI4G,YAAY,CAAC3G,KAAK,EAAE;IAC/C0F,MAAM,CAACE,IAAI,CAACe,YAAY,CAAC3G,KAAK,CAAC;EACjC;EAEA,IAAI,CAACyF,IAAI,CAACmB,UAAU,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC5B,QAAQ,CAACS,IAAI,CAACmB,UAAU,CAAC,EAAE;IAC1FlB,MAAM,CAACE,IAAI,CAAC,mCAAmC,CAAC;EAClD;EAEA,IAAI,CAACH,IAAI,CAACoB,OAAO,IAAI,CAAC,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC7B,QAAQ,CAACS,IAAI,CAACoB,OAAO,CAAC,EAAE;IACnFnB,MAAM,CAACE,IAAI,CAAC,gCAAgC,CAAC;EAC/C;EAEA,MAAMkB,eAAe,GAAGnD,iBAAiB,CAAC8B,IAAI,CAAC7B,SAAS,CAAC;EACzD,IAAI,CAACkD,eAAe,CAAC/G,OAAO,IAAI+G,eAAe,CAAC9G,KAAK,EAAE;IACrD0F,MAAM,CAACE,IAAI,CAACkB,eAAe,CAAC9G,KAAK,CAAC;EACpC;EAEA,IAAIyF,IAAI,CAACxB,OAAO,EAAE;IAChB,MAAM8C,aAAa,GAAG/C,eAAe,CAACyB,IAAI,CAACxB,OAAO,EAAEwB,IAAI,CAAC7B,SAAS,CAAC;IACnE,IAAI,CAACmD,aAAa,CAAChH,OAAO,IAAIgH,aAAa,CAAC/G,KAAK,EAAE;MACjD0F,MAAM,CAACE,IAAI,CAACmB,aAAa,CAAC/G,KAAK,CAAC;IAClC;EACF;EAEA,MAAMgH,aAAa,GAAG5C,qBAAqB,CAACqB,IAAI,CAACpB,aAAa,CAAC;EAC/D,IAAI,CAAC2C,aAAa,CAACjH,OAAO,IAAIiH,aAAa,CAAChH,KAAK,EAAE;IACjD0F,MAAM,CAACE,IAAI,CAACoB,aAAa,CAAChH,KAAK,CAAC;EAClC;EAEA,MAAMiH,YAAY,GAAG5B,cAAc,CAACI,IAAI,CAACH,MAAM,CAAC;EAChD,IAAI,CAAC2B,YAAY,CAAClH,OAAO,IAAIkH,YAAY,CAACjH,KAAK,EAAE;IAC/C0F,MAAM,CAACE,IAAI,CAACqB,YAAY,CAACjH,KAAK,CAAC;EACjC;EAEA,OAAO;IACLD,OAAO,EAAE2F,MAAM,CAACrF,MAAM,KAAK,CAAC;IAC5BqF;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMwB,WAAW,GAAIC,GAAW,IAA4B;EACjE,IAAI,CAACA,GAAG,EAAE;IACR,OAAO;MAAEpH,OAAO,EAAE;IAAK,CAAC,CAAC,CAAC;EAC5B;EAEA,IAAI;IACF,IAAIqH,GAAG,CAACD,GAAG,CAAC;IACZ,OAAO;MAAEpH,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,MAAM;IACN,OAAO;MAAEA,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAA2B,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMqH,WAAW,GAAIC,SAAwB,IAA4B;EAC9E,IAAI,CAACA,SAAS,EAAE;IACd,OAAO;MAAEvH,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAyB,CAAC;EAC5D;EAEA,MAAMuH,YAAY,GAAG,OAAOD,SAAS,KAAK,QAAQ,GAAG,IAAI9D,IAAI,CAAC8D,SAAS,CAAC,GAAGA,SAAS;EACpF,MAAMxD,KAAK,GAAG,IAAIN,IAAI,CAAC,CAAC;EACxB,MAAMgE,GAAG,GAAG1D,KAAK,CAAC2D,WAAW,CAAC,CAAC,GAAGF,YAAY,CAACE,WAAW,CAAC,CAAC;EAC5D,MAAMC,SAAS,GAAG5D,KAAK,CAAC6D,QAAQ,CAAC,CAAC,GAAGJ,YAAY,CAACI,QAAQ,CAAC,CAAC;EAE5D,IAAID,SAAS,GAAG,CAAC,IAAKA,SAAS,KAAK,CAAC,IAAI5D,KAAK,CAAC8D,OAAO,CAAC,CAAC,GAAGL,YAAY,CAACK,OAAO,CAAC,CAAE,EAAE;IAClF;EAAA;EAGF,IAAIJ,GAAG,GAAG,EAAE,EAAE;IACZ,OAAO;MAAEzH,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAgD,CAAC;EACnF;EAEA,IAAIwH,GAAG,GAAG,GAAG,EAAE;IACb,OAAO;MAAEzH,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAkC,CAAC;EACrE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAM8H,UAAU,GAAG;EACxB/H,KAAK,EAAED,aAAa;EACpBO,QAAQ,EAAED,gBAAgB;EAC1B2H,oBAAoB,EAAEvH,4BAA4B;EAClDG,WAAW,EAAED,mBAAmB;EAChCoB,IAAI,EAAED,YAAY;EAClBQ,GAAG,EAAED,WAAW;EAChB4F,QAAQ,EAAEzF,gBAAgB;EAC1B0F,cAAc,EAAEtF,sBAAsB;EACtCI,WAAW,EAAED,mBAAmB;EAChCI,MAAM,EAAED,cAAc;EACtBM,IAAI,EAAED,YAAY;EAClBO,SAAS,EAAED,iBAAiB;EAC5BM,OAAO,EAAED,eAAe;EACxBK,aAAa,EAAED,qBAAqB;EACpCK,IAAI,EAAED,YAAY;EAClBW,QAAQ,EAAED,gBAAgB;EAC1BI,MAAM,EAAED,cAAc;EACtB8B,GAAG,EAAED,WAAW;EAChBM,GAAG,EAAEH,WAAW;EAChBY,KAAK,EAAE;IACLC,KAAK,EAAE1C,iBAAiB;IACxB2C,YAAY,EAAEtC,wBAAwB;IACtCuC,GAAG,EAAE7B;EACP;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}