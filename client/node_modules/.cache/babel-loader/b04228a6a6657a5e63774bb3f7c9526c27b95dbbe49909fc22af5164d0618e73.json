{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\shighi\\\\farmwork-hub\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { STORAGE_KEYS, ERROR_MESSAGES } from '../utils/constants';\nimport { validateEmail, validatePassword } from '../utils/validators';\n\n// Demo user data for fallback before backend setup\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEMO_USERS = [{\n  id: '1',\n  email: 'worker@farmwork.com',\n  firstName: 'John',\n  lastName: 'Ochieng',\n  phoneNumber: '+254712345678',\n  location: 'Nairobi, Kenya',\n  userType: 'worker',\n  profilePicture: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\n  bio: 'Experienced farm worker with 5 years in crop cultivation and livestock management.',\n  skills: ['Crop Cultivation', 'Livestock Management', 'Irrigation Systems'],\n  experience: '5 years of experience in agricultural operations',\n  education: 'Certificate in Agricultural Science',\n  preferredJobTypes: ['Crop Cultivation', 'Livestock Management'],\n  expectedSalary: 'KES 25,000 - 35,000',\n  availability: 'Full-time',\n  isVerified: true,\n  rating: 4.8,\n  totalRatings: 24,\n  createdAt: '2024-01-15T00:00:00.000Z',\n  updatedAt: '2024-06-20T00:00:00.000Z'\n}, {\n  id: '2',\n  email: 'employer@farmwork.com',\n  firstName: 'Sarah',\n  lastName: 'Mwangi',\n  phoneNumber: '+254723456789',\n  location: 'Nakuru, Kenya',\n  userType: 'employer',\n  profilePicture: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',\n  bio: 'Owner of Green Valley Farm. Looking for dedicated workers to join our agricultural operations.',\n  skills: [],\n  experience: '10 years of farm management experience',\n  education: 'Bachelor of Science in Agriculture',\n  preferredJobTypes: [],\n  expectedSalary: '',\n  availability: '',\n  isVerified: true,\n  rating: 4.9,\n  totalRatings: 18,\n  createdAt: '2024-02-10T00:00:00.000Z',\n  updatedAt: '2024-06-25T00:00:00.000Z'\n}, {\n  id: '3',\n  email: 'admin@farmwork.com',\n  firstName: 'David',\n  lastName: 'Kipkoech',\n  phoneNumber: '+254734567890',\n  location: 'Eldoret, Kenya',\n  userType: 'admin',\n  profilePicture: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\n  bio: 'FarmWork Hub Administrator',\n  skills: [],\n  experience: 'System Administrator',\n  education: 'Bachelor of Science in Computer Science',\n  preferredJobTypes: [],\n  expectedSalary: '',\n  availability: '',\n  isVerified: true,\n  rating: 5.0,\n  totalRatings: 5,\n  createdAt: '2024-01-01T00:00:00.000Z',\n  updatedAt: '2024-06-30T00:00:00.000Z'\n}];\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null\n};\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'AUTH_START':\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: state.user ? {\n          ...state.user,\n          ...action.payload\n        } : null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n}\n// Create context with proper typing\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state from localStorage on mount\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n        const userData = localStorage.getItem(STORAGE_KEYS.USER_DATA);\n        if (token && userData) {\n          const user = JSON.parse(userData);\n          // In production, you would validate the token with the backend\n          dispatch({\n            type: 'AUTH_SUCCESS',\n            payload: {\n              user,\n              token\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Clear invalid data\n        localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n        localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async credentials => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      // Validate input\n      if (!validateEmail(credentials.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      if (!credentials.password) {\n        throw new Error('Password is required');\n      }\n\n      // Demo authentication - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n\n      const user = DEMO_USERS.find(u => u.email === credentials.email);\n      if (!user) {\n        throw new Error('Invalid email or password');\n      }\n\n      // Demo password check (in production, this would be handled by backend)\n      if (credentials.password !== 'password123') {\n        throw new Error('Invalid email or password');\n      }\n\n      // Store auth data\n      const token = `demo_token_${user.id}_${Date.now()}`;\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(user));\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user,\n          token\n        }\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : ERROR_MESSAGES.SERVER_ERROR;\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  };\n  const register = async data => {\n    dispatch({\n      type: 'AUTH_START'\n    });\n    try {\n      var _data$firstName, _data$lastName, _data$phoneNumber;\n      // Validate input\n      if (!validateEmail(data.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      if (!validatePassword(data.password)) {\n        throw new Error(`Password must be at least 8 characters long`);\n      }\n      if (data.password !== data.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      if (!((_data$firstName = data.firstName) !== null && _data$firstName !== void 0 && _data$firstName.trim()) || !((_data$lastName = data.lastName) !== null && _data$lastName !== void 0 && _data$lastName.trim())) {\n        throw new Error('First name and last name are required');\n      }\n      if (!((_data$phoneNumber = data.phoneNumber) !== null && _data$phoneNumber !== void 0 && _data$phoneNumber.trim())) {\n        throw new Error('Phone number is required');\n      }\n      if (!data.userType) {\n        throw new Error('Please select a user type');\n      }\n\n      // Demo registration - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API delay\n\n      // Check if email already exists\n      const existingUser = DEMO_USERS.find(u => u.email === data.email);\n      if (existingUser) {\n        throw new Error('Email address is already registered');\n      }\n\n      // Create new user\n      const newUser = {\n        id: `demo_${Date.now()}`,\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        phoneNumber: data.phoneNumber,\n        location: data.location || '',\n        userType: data.userType,\n        profilePicture: '',\n        bio: data.bio || '',\n        skills: data.skills || [],\n        experience: '',\n        education: '',\n        preferredJobTypes: [],\n        expectedSalary: '',\n        availability: '',\n        isVerified: false,\n        rating: 0,\n        totalRatings: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Store auth data\n      const token = `demo_token_${newUser.id}_${Date.now()}`;\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(newUser));\n      dispatch({\n        type: 'AUTH_SUCCESS',\n        payload: {\n          user: newUser,\n          token\n        }\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Registration failed';\n      dispatch({\n        type: 'AUTH_FAILURE',\n        payload: errorMessage\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    // Clear auth data\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n\n    // Clear other user-specific data\n    localStorage.removeItem(STORAGE_KEYS.SEARCH_FILTERS);\n    dispatch({\n      type: 'LOGOUT'\n    });\n  };\n  const updateProfile = async data => {\n    if (!state.user) {\n      throw new Error('User not authenticated');\n    }\n    try {\n      // Demo profile update - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 800));\n      const updatedUser = {\n        ...state.user,\n        ...data,\n        updatedAt: new Date().toISOString()\n      };\n\n      // Update localStorage\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\n      dispatch({\n        type: 'UPDATE_USER',\n        payload: data\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update profile';\n      throw new Error(errorMessage);\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      if (!validateEmail(email)) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      // Demo forgot password - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In demo mode, we'll just simulate success\n      // In production, this would send an email with reset link\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to send reset email';\n      throw new Error(errorMessage);\n    }\n  };\n  const resetPassword = async (token, password) => {\n    try {\n      if (!validatePassword(password)) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      // Demo password reset - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In production, this would validate the token and update the password\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to reset password';\n      throw new Error(errorMessage);\n    }\n  };\n  const refreshUser = async () => {\n    if (!state.token) {\n      throw new Error('No authentication token found');\n    }\n    try {\n      // Demo refresh user - replace with actual API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // In production, this would fetch updated user data from the backend\n      // For demo purposes, we'll just update the updatedAt timestamp\n      if (state.user) {\n        const updatedUser = {\n          ...state.user,\n          updatedAt: new Date().toISOString()\n        };\n        localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\n        dispatch({\n          type: 'UPDATE_USER',\n          payload: {\n            updatedAt: updatedUser.updatedAt\n          }\n        });\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to refresh user data';\n      throw new Error(errorMessage);\n    }\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    loading: state.isLoading,\n    // Map isLoading to loading for backward compatibility\n    login,\n    register,\n    logout,\n    updateProfile,\n    forgotPassword,\n    resetPassword,\n    refreshUser,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 10\n  }, this);\n}\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Demo credentials for testing:\n// Email: worker@farmwork.com or employer@farmwork.com or admin@farmwork.com\n// Password: password123\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","STORAGE_KEYS","ERROR_MESSAGES","validateEmail","validatePassword","jsxDEV","_jsxDEV","DEMO_USERS","id","email","firstName","lastName","phoneNumber","location","userType","profilePicture","bio","skills","experience","education","preferredJobTypes","expectedSalary","availability","isVerified","rating","totalRatings","createdAt","updatedAt","initialState","user","token","isAuthenticated","isLoading","error","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","initializeAuth","localStorage","getItem","AUTH_TOKEN","userData","USER_DATA","JSON","parse","console","removeItem","login","credentials","Error","password","Promise","resolve","setTimeout","find","u","Date","now","setItem","stringify","errorMessage","message","SERVER_ERROR","register","data","_data$firstName","_data$lastName","_data$phoneNumber","confirmPassword","trim","existingUser","newUser","toISOString","logout","SEARCH_FILTERS","updateProfile","updatedUser","forgotPassword","resetPassword","refreshUser","clearError","value","loading","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/User/shighi/farmwork-hub/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\r\nimport { User, LoginCredentials, RegisterData } from '../types/auth';\r\nimport { STORAGE_KEYS, ERROR_MESSAGES, SUCCESS_MESSAGES } from '../utils/constants';\r\nimport { validateEmail, validatePassword } from '../utils/validators';\r\n\r\n// Demo user data for fallback before backend setup\r\nconst DEMO_USERS = [\r\n  {\r\n    id: '1',\r\n    email: 'worker@farmwork.com',\r\n    firstName: 'John',\r\n    lastName: 'Ochieng',\r\n    phoneNumber: '+254712345678',\r\n    location: 'Nairobi, Kenya',\r\n    userType: 'worker' as const,\r\n    profilePicture: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',\r\n    bio: 'Experienced farm worker with 5 years in crop cultivation and livestock management.',\r\n    skills: ['Crop Cultivation', 'Livestock Management', 'Irrigation Systems'],\r\n    experience: '5 years of experience in agricultural operations',\r\n    education: 'Certificate in Agricultural Science',\r\n    preferredJobTypes: ['Crop Cultivation', 'Livestock Management'],\r\n    expectedSalary: 'KES 25,000 - 35,000',\r\n    availability: 'Full-time',\r\n    isVerified: true,\r\n    rating: 4.8,\r\n    totalRatings: 24,\r\n    createdAt: '2024-01-15T00:00:00.000Z',\r\n    updatedAt: '2024-06-20T00:00:00.000Z',\r\n  },\r\n  {\r\n    id: '2',\r\n    email: 'employer@farmwork.com',\r\n    firstName: 'Sarah',\r\n    lastName: 'Mwangi',\r\n    phoneNumber: '+254723456789',\r\n    location: 'Nakuru, Kenya',\r\n    userType: 'employer' as const,\r\n    profilePicture: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face',\r\n    bio: 'Owner of Green Valley Farm. Looking for dedicated workers to join our agricultural operations.',\r\n    skills: [],\r\n    experience: '10 years of farm management experience',\r\n    education: 'Bachelor of Science in Agriculture',\r\n    preferredJobTypes: [],\r\n    expectedSalary: '',\r\n    availability: '',\r\n    isVerified: true,\r\n    rating: 4.9,\r\n    totalRatings: 18,\r\n    createdAt: '2024-02-10T00:00:00.000Z',\r\n    updatedAt: '2024-06-25T00:00:00.000Z',\r\n  },\r\n  {\r\n    id: '3',\r\n    email: 'admin@farmwork.com',\r\n    firstName: 'David',\r\n    lastName: 'Kipkoech',\r\n    phoneNumber: '+254734567890',\r\n    location: 'Eldoret, Kenya',\r\n    userType: 'admin' as const,\r\n    profilePicture: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',\r\n    bio: 'FarmWork Hub Administrator',\r\n    skills: [],\r\n    experience: 'System Administrator',\r\n    education: 'Bachelor of Science in Computer Science',\r\n    preferredJobTypes: [],\r\n    expectedSalary: '',\r\n    availability: '',\r\n    isVerified: true,\r\n    rating: 5.0,\r\n    totalRatings: 5,\r\n    createdAt: '2024-01-01T00:00:00.000Z',\r\n    updatedAt: '2024-06-30T00:00:00.000Z',\r\n  },\r\n];\r\n\r\ninterface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\ntype AuthAction =\r\n  | { type: 'AUTH_START' }\r\n  | { type: 'AUTH_SUCCESS'; payload: { user: User; token: string } }\r\n  | { type: 'AUTH_FAILURE'; payload: string }\r\n  | { type: 'LOGOUT' }\r\n  | { type: 'UPDATE_USER'; payload: Partial<User> }\r\n  | { type: 'CLEAR_ERROR' };\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nfunction authReducer(state: AuthState, action: AuthAction): AuthState {\r\n  switch (action.type) {\r\n    case 'AUTH_START':\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n    case 'AUTH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        user: action.payload.user,\r\n        token: action.payload.token,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n    case 'AUTH_FAILURE':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: null,\r\n      };\r\n    case 'UPDATE_USER':\r\n      return {\r\n        ...state,\r\n        user: state.user ? { ...state.user, ...action.payload } : null,\r\n      };\r\n    case 'CLEAR_ERROR':\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport interface AuthContextValue extends AuthState {\r\n  // Add the missing loading property by aliasing isLoading\r\n  loading: boolean;\r\n  login: (credentials: LoginCredentials) => Promise<void>;\r\n  register: (data: RegisterData) => Promise<void>;\r\n  logout: () => void;\r\n  updateProfile: (data: Partial<User>) => Promise<void>;\r\n  forgotPassword: (email: string) => Promise<void>;\r\n  resetPassword: (token: string, password: string) => Promise<void>;\r\n  refreshUser: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\n// Create context with proper typing\r\nexport const AuthContext = createContext<AuthContextValue | null>(null);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function AuthProvider({ children }: AuthProviderProps) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  // Initialize auth state from localStorage on mount\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      try {\r\n        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\r\n        const userData = localStorage.getItem(STORAGE_KEYS.USER_DATA);\r\n\r\n        if (token && userData) {\r\n          const user = JSON.parse(userData);\r\n          // In production, you would validate the token with the backend\r\n          dispatch({ type: 'AUTH_SUCCESS', payload: { user, token } });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        // Clear invalid data\r\n        localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\r\n        localStorage.removeItem(STORAGE_KEYS.USER_DATA);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (credentials: LoginCredentials) => {\r\n    dispatch({ type: 'AUTH_START' });\r\n\r\n    try {\r\n      // Validate input\r\n      if (!validateEmail(credentials.email)) {\r\n        throw new Error('Please enter a valid email address');\r\n      }\r\n\r\n      if (!credentials.password) {\r\n        throw new Error('Password is required');\r\n      }\r\n\r\n      // Demo authentication - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n\r\n      const user = DEMO_USERS.find(u => u.email === credentials.email);\r\n      \r\n      if (!user) {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n\r\n      // Demo password check (in production, this would be handled by backend)\r\n      if (credentials.password !== 'password123') {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n\r\n      // Store auth data\r\n      const token = `demo_token_${user.id}_${Date.now()}`;\r\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\r\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(user));\r\n\r\n      dispatch({ type: 'AUTH_SUCCESS', payload: { user, token } });\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : ERROR_MESSAGES.SERVER_ERROR;\r\n      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (data: RegisterData) => {\r\n    dispatch({ type: 'AUTH_START' });\r\n\r\n    try {\r\n      // Validate input\r\n      if (!validateEmail(data.email)) {\r\n        throw new Error('Please enter a valid email address');\r\n      }\r\n\r\n      if (!validatePassword(data.password)) {\r\n        throw new Error(`Password must be at least 8 characters long`);\r\n      }\r\n\r\n      if (data.password !== data.confirmPassword) {\r\n        throw new Error('Passwords do not match');\r\n      }\r\n\r\n      if (!data.firstName?.trim() || !data.lastName?.trim()) {\r\n        throw new Error('First name and last name are required');\r\n      }\r\n\r\n      if (!data.phoneNumber?.trim()) {\r\n        throw new Error('Phone number is required');\r\n      }\r\n\r\n      if (!data.userType) {\r\n        throw new Error('Please select a user type');\r\n      }\r\n\r\n      // Demo registration - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate API delay\r\n\r\n      // Check if email already exists\r\n      const existingUser = DEMO_USERS.find(u => u.email === data.email);\r\n      if (existingUser) {\r\n        throw new Error('Email address is already registered');\r\n      }\r\n\r\n      // Create new user\r\n      const newUser: User = {\r\n        id: `demo_${Date.now()}`,\r\n        email: data.email,\r\n        firstName: data.firstName,\r\n        lastName: data.lastName,\r\n        phoneNumber: data.phoneNumber,\r\n        location: data.location || '',\r\n        userType: data.userType,\r\n        profilePicture: '',\r\n        bio: data.bio || '',\r\n        skills: data.skills || [],\r\n        experience: '',\r\n        education: '',\r\n        preferredJobTypes: [],\r\n        expectedSalary: '',\r\n        availability: '',\r\n        isVerified: false,\r\n        rating: 0,\r\n        totalRatings: 0,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      // Store auth data\r\n      const token = `demo_token_${newUser.id}_${Date.now()}`;\r\n      localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\r\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(newUser));\r\n\r\n      dispatch({ type: 'AUTH_SUCCESS', payload: { user: newUser, token } });\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Registration failed';\r\n      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear auth data\r\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\r\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\r\n    \r\n    // Clear other user-specific data\r\n    localStorage.removeItem(STORAGE_KEYS.SEARCH_FILTERS);\r\n\r\n    dispatch({ type: 'LOGOUT' });\r\n  };\r\n\r\n  const updateProfile = async (data: Partial<User>) => {\r\n    if (!state.user) {\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      // Demo profile update - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 800));\r\n\r\n      const updatedUser = {\r\n        ...state.user,\r\n        ...data,\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      // Update localStorage\r\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\r\n\r\n      dispatch({ type: 'UPDATE_USER', payload: data });\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update profile';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const forgotPassword = async (email: string) => {\r\n    try {\r\n      if (!validateEmail(email)) {\r\n        throw new Error('Please enter a valid email address');\r\n      }\r\n\r\n      // Demo forgot password - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // In demo mode, we'll just simulate success\r\n      // In production, this would send an email with reset link\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Failed to send reset email';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const resetPassword = async (token: string, password: string) => {\r\n    try {\r\n      if (!validatePassword(password)) {\r\n        throw new Error('Password must be at least 8 characters long');\r\n      }\r\n\r\n      // Demo password reset - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // In production, this would validate the token and update the password\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Failed to reset password';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const refreshUser = async () => {\r\n    if (!state.token) {\r\n      throw new Error('No authentication token found');\r\n    }\r\n\r\n    try {\r\n      // Demo refresh user - replace with actual API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n      // In production, this would fetch updated user data from the backend\r\n      // For demo purposes, we'll just update the updatedAt timestamp\r\n      if (state.user) {\r\n        const updatedUser = {\r\n          ...state.user,\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\r\n        dispatch({ type: 'UPDATE_USER', payload: { updatedAt: updatedUser.updatedAt } });\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Failed to refresh user data';\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  const value: AuthContextValue = {\r\n    ...state,\r\n    loading: state.isLoading, // Map isLoading to loading for backward compatibility\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    forgotPassword,\r\n    resetPassword,\r\n    refreshUser,\r\n    clearError,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n}\r\n\r\n// Custom hook to use the auth context\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Demo credentials for testing:\r\n// Email: worker@farmwork.com or employer@farmwork.com or admin@farmwork.com\r\n// Password: password123"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}