{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { PAGINATION } from '../utils/constants';\nimport { demoJobs, demoApplications } from '../data/demoData';\nexport function useJobs({\n  filters,\n  pageSize = PAGINATION.DEFAULT_PAGE_SIZE,\n  autoFetch = true\n} = {}) {\n  _s();\n  const [state, setState] = useState({\n    jobs: [],\n    loading: false,\n    error: null,\n    totalCount: 0,\n    hasMore: true\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Filter and sort jobs based on filters\n  const filteredJobs = useMemo(() => {\n    let filtered = [...demoJobs];\n    if (filters) {\n      // Location filter\n      if (filters.location) {\n        filtered = filtered.filter(job => job.location.toLowerCase().includes(filters.location.toLowerCase()));\n      }\n\n      // Category filter\n      if (filters.category) {\n        filtered = filtered.filter(job => job.category === filters.category);\n      }\n\n      // Job type filter\n      if (filters.jobType) {\n        filtered = filtered.filter(job => job.jobType === filters.jobType);\n      }\n\n      // Salary range filter\n      if (filters.salaryRange) {\n        if (filters.salaryRange.min !== undefined) {\n          filtered = filtered.filter(job => job.salary >= filters.salaryRange.min);\n        }\n        if (filters.salaryRange.max !== undefined) {\n          filtered = filtered.filter(job => job.salary <= filters.salaryRange.max);\n        }\n      }\n\n      // Legacy salary filters (for backward compatibility)\n      if (filters.minSalary !== undefined) {\n        filtered = filtered.filter(job => job.salary >= filters.minSalary);\n      }\n      if (filters.maxSalary !== undefined) {\n        filtered = filtered.filter(job => job.salary <= filters.maxSalary);\n      }\n\n      // Salary type filter\n      if (filters.salaryType) {\n        filtered = filtered.filter(job => job.salaryType === filters.salaryType);\n      }\n\n      // Search query filter\n      if (filters.search) {\n        const searchTerm = filters.search.toLowerCase();\n        filtered = filtered.filter(job => job.title.toLowerCase().includes(searchTerm) || job.description.toLowerCase().includes(searchTerm) || job.skills.some(skill => skill.toLowerCase().includes(searchTerm)));\n      }\n\n      // Skills filter\n      if (filters.skills && filters.skills.length > 0) {\n        filtered = filtered.filter(job => filters.skills.some(skill => job.skills.some(jobSkill => jobSkill.toLowerCase().includes(skill.toLowerCase()))));\n      }\n    }\n\n    // Sort jobs based on sortBy option\n    filtered.sort((a, b) => {\n      // Always prioritize boosted jobs first\n      if (a.isBoosted && !b.isBoosted) return -1;\n      if (!a.isBoosted && b.isBoosted) return 1;\n\n      // Then sort by the selected option\n      const sortBy = (filters === null || filters === void 0 ? void 0 : filters.sortBy) || 'newest';\n      const sortOrder = (filters === null || filters === void 0 ? void 0 : filters.sortOrder) || 'desc';\n      let comparison = 0;\n      switch (sortBy) {\n        case 'oldest':\n          comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n          break;\n        case 'salary-high':\n          comparison = b.salary - a.salary;\n          break;\n        case 'salary-low':\n          comparison = a.salary - b.salary;\n          break;\n        case 'location':\n          comparison = a.location.localeCompare(b.location);\n          break;\n        case 'title':\n          comparison = a.title.localeCompare(b.title);\n          break;\n        case 'salary':\n          comparison = sortOrder === 'asc' ? a.salary - b.salary : b.salary - a.salary;\n          break;\n        case 'createdAt':\n          comparison = sortOrder === 'asc' ? new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime() : new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n          break;\n        case 'newest':\n        default:\n          comparison = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n          break;\n      }\n      return comparison;\n    });\n    return filtered;\n  }, [filters]);\n\n  // Paginated jobs\n  const paginatedJobs = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    return filteredJobs.slice(0, endIndex);\n  }, [filteredJobs, currentPage, pageSize]);\n  const fetchJobs = useCallback(async (page = 1, reset = false) => {\n    setState(prev => ({\n      ...prev,\n      loading: true,\n      error: null\n    }));\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const startIndex = (page - 1) * pageSize;\n      const endIndex = startIndex + pageSize;\n      const pageJobs = filteredJobs.slice(startIndex, endIndex);\n      setState(prev => ({\n        ...prev,\n        jobs: reset ? pageJobs : [...prev.jobs, ...pageJobs],\n        loading: false,\n        totalCount: filteredJobs.length,\n        hasMore: endIndex < filteredJobs.length\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: error instanceof Error ? error.message : 'Failed to fetch jobs'\n      }));\n    }\n  }, [filteredJobs, pageSize]);\n  const loadMore = useCallback(() => {\n    if (!state.loading && state.hasMore) {\n      const nextPage = currentPage + 1;\n      setCurrentPage(nextPage);\n      fetchJobs(nextPage, false);\n    }\n  }, [currentPage, state.loading, state.hasMore, fetchJobs]);\n  const refresh = useCallback(() => {\n    setCurrentPage(1);\n    fetchJobs(1, true);\n  }, [fetchJobs]);\n\n  // Create job function\n  const createJob = useCallback(async jobData => {\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Create new job object\n      const newJob = {\n        id: `job-${Date.now()}`,\n        ...jobData,\n        employerId: 'current-user-id',\n        // In real app, get from auth context\n        status: 'active',\n        isBoosted: false,\n        applicationsCount: 0,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // In a real app, this would make an API call to create the job\n      // For demo purposes, we'll just add it to the local state\n      console.log('Creating job:', newJob);\n\n      // Add to beginning of jobs array for immediate visibility\n      setState(prev => ({\n        ...prev,\n        jobs: [newJob, ...prev.jobs],\n        totalCount: prev.totalCount + 1\n      }));\n      return newJob;\n    } catch (error) {\n      console.error('Error creating job:', error);\n      throw new Error('Failed to create job. Please try again.');\n    }\n  }, []);\n\n  // Apply for job function\n  const applyForJob = useCallback(async (jobId, applicationData) => {\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In a real app, this would make an API call to submit the application\n      // For demo purposes, we'll just log the application data\n      console.log('Applying for job:', {\n        jobId,\n        applicationData,\n        timestamp: new Date().toISOString()\n      });\n\n      // Simulate success - in a real app, you'd handle the API response\n      return {\n        success: true,\n        applicationId: `app-${Date.now()}`,\n        message: 'Application submitted successfully!'\n      };\n    } catch (error) {\n      console.error('Error applying for job:', error);\n      throw new Error('Failed to submit application. Please try again.');\n    }\n  }, []);\n\n  // Auto-fetch on mount and when filters change\n  useEffect(() => {\n    if (autoFetch) {\n      setCurrentPage(1);\n      setState(prev => ({\n        ...prev,\n        jobs: []\n      }));\n      fetchJobs(1, true);\n    }\n  }, [filters, autoFetch, fetchJobs]);\n\n  // Update jobs when paginated jobs change (for initial load)\n  useEffect(() => {\n    if (currentPage === 1) {\n      setState(prev => ({\n        ...prev,\n        jobs: paginatedJobs,\n        totalCount: filteredJobs.length,\n        hasMore: paginatedJobs.length < filteredJobs.length\n      }));\n    }\n  }, [paginatedJobs, filteredJobs.length, currentPage]);\n  return {\n    ...state,\n    loadMore,\n    refresh,\n    createJob,\n    applyForJob,\n    currentPage,\n    isFirstPage: currentPage === 1,\n    totalPages: Math.ceil(filteredJobs.length / pageSize)\n  };\n}\n_s(useJobs, \"sNbzVdcu7IK/FR7Nb1RUx3bYoUk=\");\nexport function useJob(jobId) {\n  _s2();\n  const [job, setJob] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchJob = useCallback(async () => {\n    if (!jobId) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const foundJob = demoJobs.find(j => j.id === jobId);\n      if (!foundJob) {\n        throw new Error('Job not found');\n      }\n      setJob(foundJob);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to fetch job');\n    } finally {\n      setLoading(false);\n    }\n  }, [jobId]);\n  useEffect(() => {\n    fetchJob();\n  }, [fetchJob]);\n  return {\n    job,\n    loading,\n    error,\n    refresh: fetchJob\n  };\n}\n_s2(useJob, \"rDylxkMczg/vC02HNbb5f+tk+Po=\");\nexport function useJobApplications(jobId) {\n  _s3();\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchApplications = useCallback(async () => {\n    if (!jobId) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 400));\n\n      // Filter applications for the specific job\n      const jobApplications = demoApplications.filter(app => app.jobId === jobId);\n      setApplications(jobApplications);\n    } catch (error) {\n      setError(error instanceof Error ? error.message : 'Failed to fetch applications');\n    } finally {\n      setLoading(false);\n    }\n  }, [jobId]);\n  const updateApplicationStatus = useCallback(async (applicationId, status) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 300));\n      setApplications(prev => prev.map(app => app.id === applicationId ? {\n        ...app,\n        status,\n        updatedAt: new Date().toISOString()\n      } : app));\n    } catch (error) {\n      throw new Error('Failed to update application status');\n    }\n  }, []);\n  useEffect(() => {\n    fetchApplications();\n  }, [fetchApplications]);\n  return {\n    applications,\n    loading,\n    error,\n    updateApplicationStatus,\n    refresh: fetchApplications\n  };\n}\n_s3(useJobApplications, \"DVvp9RlocDqFyhQOaJ78Nshg1MU=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","PAGINATION","demoJobs","demoApplications","useJobs","filters","pageSize","DEFAULT_PAGE_SIZE","autoFetch","_s","state","setState","jobs","loading","error","totalCount","hasMore","currentPage","setCurrentPage","filteredJobs","filtered","location","filter","job","toLowerCase","includes","category","jobType","salaryRange","min","undefined","salary","max","minSalary","maxSalary","salaryType","search","searchTerm","title","description","skills","some","skill","length","jobSkill","sort","a","b","isBoosted","sortBy","sortOrder","comparison","Date","createdAt","getTime","localeCompare","paginatedJobs","startIndex","endIndex","slice","fetchJobs","page","reset","prev","Promise","resolve","setTimeout","pageJobs","Error","message","loadMore","nextPage","refresh","createJob","jobData","newJob","id","now","employerId","status","applicationsCount","toISOString","updatedAt","console","log","applyForJob","jobId","applicationData","timestamp","success","applicationId","isFirstPage","totalPages","Math","ceil","useJob","_s2","setJob","setLoading","setError","fetchJob","foundJob","find","j","useJobApplications","_s3","applications","setApplications","fetchApplications","jobApplications","app","updateApplicationStatus","map"],"sources":["C:/Users/Tunde/Desktop/farmwork-hub/client/src/hooks/useJobs.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Job, JobFilters, JobApplication, ApplyJobData, CreateJobData } from '../types/jobs';\r\nimport { PAGINATION } from '../utils/constants';\r\nimport { demoJobs, demoApplications } from '../data/demoData';\r\n\r\ninterface UseJobsState {\r\n  jobs: Job[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  totalCount: number;\r\n  hasMore: boolean;\r\n}\r\n\r\ninterface UseJobsParams {\r\n  filters?: JobFilters;\r\n  pageSize?: number;\r\n  autoFetch?: boolean;\r\n}\r\n\r\nexport function useJobs({ filters, pageSize = PAGINATION.DEFAULT_PAGE_SIZE, autoFetch = true }: UseJobsParams = {}) {\r\n  const [state, setState] = useState<UseJobsState>({\r\n    jobs: [],\r\n    loading: false,\r\n    error: null,\r\n    totalCount: 0,\r\n    hasMore: true,\r\n  });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  // Filter and sort jobs based on filters\r\n  const filteredJobs = useMemo(() => {\r\n    let filtered = [...demoJobs];\r\n\r\n    if (filters) {\r\n      // Location filter\r\n      if (filters.location) {\r\n        filtered = filtered.filter(job =>\r\n          job.location.toLowerCase().includes(filters.location!.toLowerCase())\r\n        );\r\n      }\r\n\r\n      // Category filter\r\n      if (filters.category) {\r\n        filtered = filtered.filter(job => job.category === filters.category);\r\n      }\r\n\r\n      // Job type filter\r\n      if (filters.jobType) {\r\n        filtered = filtered.filter(job => job.jobType === filters.jobType);\r\n      }\r\n\r\n      // Salary range filter\r\n      if (filters.salaryRange) {\r\n        if (filters.salaryRange.min !== undefined) {\r\n          filtered = filtered.filter(job => job.salary >= filters.salaryRange!.min);\r\n        }\r\n        if (filters.salaryRange.max !== undefined) {\r\n          filtered = filtered.filter(job => job.salary <= filters.salaryRange!.max);\r\n        }\r\n      }\r\n\r\n      // Legacy salary filters (for backward compatibility)\r\n      if (filters.minSalary !== undefined) {\r\n        filtered = filtered.filter(job => job.salary >= filters.minSalary!);\r\n      }\r\n      if (filters.maxSalary !== undefined) {\r\n        filtered = filtered.filter(job => job.salary <= filters.maxSalary!);\r\n      }\r\n\r\n      // Salary type filter\r\n      if (filters.salaryType) {\r\n        filtered = filtered.filter(job => job.salaryType === filters.salaryType);\r\n      }\r\n\r\n      // Search query filter\r\n      if (filters.search) {\r\n        const searchTerm = filters.search.toLowerCase();\r\n        filtered = filtered.filter(job =>\r\n          job.title.toLowerCase().includes(searchTerm) ||\r\n          job.description.toLowerCase().includes(searchTerm) ||\r\n          job.skills.some(skill => skill.toLowerCase().includes(searchTerm))\r\n        );\r\n      }\r\n\r\n      // Skills filter\r\n      if (filters.skills && filters.skills.length > 0) {\r\n        filtered = filtered.filter(job =>\r\n          filters.skills!.some(skill =>\r\n            job.skills.some(jobSkill =>\r\n              jobSkill.toLowerCase().includes(skill.toLowerCase())\r\n            )\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    // Sort jobs based on sortBy option\r\n    filtered.sort((a, b) => {\r\n      // Always prioritize boosted jobs first\r\n      if (a.isBoosted && !b.isBoosted) return -1;\r\n      if (!a.isBoosted && b.isBoosted) return 1;\r\n\r\n      // Then sort by the selected option\r\n      const sortBy = filters?.sortBy || 'newest';\r\n      const sortOrder = filters?.sortOrder || 'desc';\r\n      \r\n      let comparison = 0;\r\n      \r\n      switch (sortBy) {\r\n        case 'oldest':\r\n          comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\r\n          break;\r\n        case 'salary-high':\r\n          comparison = b.salary - a.salary;\r\n          break;\r\n        case 'salary-low':\r\n          comparison = a.salary - b.salary;\r\n          break;\r\n        case 'location':\r\n          comparison = a.location.localeCompare(b.location);\r\n          break;\r\n        case 'title':\r\n          comparison = a.title.localeCompare(b.title);\r\n          break;\r\n        case 'salary':\r\n          comparison = sortOrder === 'asc' ? a.salary - b.salary : b.salary - a.salary;\r\n          break;\r\n        case 'createdAt':\r\n          comparison = sortOrder === 'asc' \r\n            ? new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\r\n            : new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n          break;\r\n        case 'newest':\r\n        default:\r\n          comparison = new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\r\n          break;\r\n      }\r\n      \r\n      return comparison;\r\n    });\r\n\r\n    return filtered;\r\n  }, [filters]);\r\n\r\n  // Paginated jobs\r\n  const paginatedJobs = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    return filteredJobs.slice(0, endIndex);\r\n  }, [filteredJobs, currentPage, pageSize]);\r\n\r\n  const fetchJobs = useCallback(async (page: number = 1, reset: boolean = false) => {\r\n    setState(prev => ({ ...prev, loading: true, error: null }));\r\n\r\n    try {\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n      const startIndex = (page - 1) * pageSize;\r\n      const endIndex = startIndex + pageSize;\r\n      const pageJobs = filteredJobs.slice(startIndex, endIndex);\r\n\r\n      setState(prev => ({\r\n        ...prev,\r\n        jobs: reset ? pageJobs : [...prev.jobs, ...pageJobs],\r\n        loading: false,\r\n        totalCount: filteredJobs.length,\r\n        hasMore: endIndex < filteredJobs.length,\r\n      }));\r\n    } catch (error) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        loading: false,\r\n        error: error instanceof Error ? error.message : 'Failed to fetch jobs',\r\n      }));\r\n    }\r\n  }, [filteredJobs, pageSize]);\r\n\r\n  const loadMore = useCallback(() => {\r\n    if (!state.loading && state.hasMore) {\r\n      const nextPage = currentPage + 1;\r\n      setCurrentPage(nextPage);\r\n      fetchJobs(nextPage, false);\r\n    }\r\n  }, [currentPage, state.loading, state.hasMore, fetchJobs]);\r\n\r\n  const refresh = useCallback(() => {\r\n    setCurrentPage(1);\r\n    fetchJobs(1, true);\r\n  }, [fetchJobs]);\r\n\r\n  // Create job function\r\n  const createJob = useCallback(async (jobData: CreateJobData): Promise<Job> => {\r\n    try {\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // Create new job object\r\n      const newJob: Job = {\r\n        id: `job-${Date.now()}`,\r\n        ...jobData,\r\n        employerId: 'current-user-id', // In real app, get from auth context\r\n        status: 'active',\r\n        isBoosted: false,\r\n        applicationsCount: 0,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      };\r\n\r\n      // In a real app, this would make an API call to create the job\r\n      // For demo purposes, we'll just add it to the local state\r\n      console.log('Creating job:', newJob);\r\n\r\n      // Add to beginning of jobs array for immediate visibility\r\n      setState(prev => ({\r\n        ...prev,\r\n        jobs: [newJob, ...prev.jobs],\r\n        totalCount: prev.totalCount + 1,\r\n      }));\r\n\r\n      return newJob;\r\n    } catch (error) {\r\n      console.error('Error creating job:', error);\r\n      throw new Error('Failed to create job. Please try again.');\r\n    }\r\n  }, []);\r\n\r\n  // Apply for job function\r\n  const applyForJob = useCallback(async (jobId: string, applicationData: ApplyJobData) => {\r\n    try {\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // In a real app, this would make an API call to submit the application\r\n      // For demo purposes, we'll just log the application data\r\n      console.log('Applying for job:', {\r\n        jobId,\r\n        applicationData,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Simulate success - in a real app, you'd handle the API response\r\n      return {\r\n        success: true,\r\n        applicationId: `app-${Date.now()}`,\r\n        message: 'Application submitted successfully!'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error applying for job:', error);\r\n      throw new Error('Failed to submit application. Please try again.');\r\n    }\r\n  }, []);\r\n\r\n  // Auto-fetch on mount and when filters change\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      setCurrentPage(1);\r\n      setState(prev => ({ ...prev, jobs: [] }));\r\n      fetchJobs(1, true);\r\n    }\r\n  }, [filters, autoFetch, fetchJobs]);\r\n\r\n  // Update jobs when paginated jobs change (for initial load)\r\n  useEffect(() => {\r\n    if (currentPage === 1) {\r\n      setState(prev => ({\r\n        ...prev,\r\n        jobs: paginatedJobs,\r\n        totalCount: filteredJobs.length,\r\n        hasMore: paginatedJobs.length < filteredJobs.length,\r\n      }));\r\n    }\r\n  }, [paginatedJobs, filteredJobs.length, currentPage]);\r\n\r\n  return {\r\n    ...state,\r\n    loadMore,\r\n    refresh,\r\n    createJob,\r\n    applyForJob,\r\n    currentPage,\r\n    isFirstPage: currentPage === 1,\r\n    totalPages: Math.ceil(filteredJobs.length / pageSize),\r\n  };\r\n}\r\n\r\nexport function useJob(jobId: string) {\r\n  const [job, setJob] = useState<Job | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchJob = useCallback(async () => {\r\n    if (!jobId) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n\r\n      const foundJob = demoJobs.find(j => j.id === jobId);\r\n      if (!foundJob) {\r\n        throw new Error('Job not found');\r\n      }\r\n\r\n      setJob(foundJob);\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Failed to fetch job');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [jobId]);\r\n\r\n  useEffect(() => {\r\n    fetchJob();\r\n  }, [fetchJob]);\r\n\r\n  return {\r\n    job,\r\n    loading,\r\n    error,\r\n    refresh: fetchJob,\r\n  };\r\n}\r\n\r\nexport function useJobApplications(jobId?: string) {\r\n  const [applications, setApplications] = useState<JobApplication[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchApplications = useCallback(async () => {\r\n    if (!jobId) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 400));\r\n\r\n      // Filter applications for the specific job\r\n      const jobApplications = demoApplications.filter(app => app.jobId === jobId);\r\n      setApplications(jobApplications);\r\n    } catch (error) {\r\n      setError(error instanceof Error ? error.message : 'Failed to fetch applications');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [jobId]);\r\n\r\n  const updateApplicationStatus = useCallback(async (applicationId: string, status: JobApplication['status']) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n\r\n      setApplications(prev =>\r\n        prev.map(app =>\r\n          app.id === applicationId\r\n            ? { ...app, status, updatedAt: new Date().toISOString() }\r\n            : app\r\n        )\r\n      );\r\n    } catch (error) {\r\n      throw new Error('Failed to update application status');\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchApplications();\r\n  }, [fetchApplications]);\r\n\r\n  return {\r\n    applications,\r\n    loading,\r\n    error,\r\n    updateApplicationStatus,\r\n    refresh: fetchApplications,\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}