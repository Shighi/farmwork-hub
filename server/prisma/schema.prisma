// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  password         String
  firstName        String
  lastName         String
  phoneNumber      String?
  location         String?
  userType         UserType      @default(WORKER)
  profilePicture   String?
  bio              String?
  skills           String[]      @default([])
  isVerified       Boolean       @default(false)
  rating           Float?        @default(0)
  totalRatings     Int           @default(0)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  postedJobs       Job[]         @relation("EmployerJobs")
  applications     Application[]
  sentRatings      Rating[]      @relation("RatingFrom")
  receivedRatings  Rating[]      @relation("RatingTo")
  messages         Message[]
  consentRecords   Consent[]     @relation("UserConsents")
  
  @@map("users")
}

model Job {
  id            String        @id @default(cuid())
  title         String
  description   String
  category      String
  location      String
  latitude      Float?
  longitude     Float?
  salary        Decimal?
  salaryType    SalaryType    @default(DAILY)
  jobType       JobType       @default(TEMPORARY)
  startDate     DateTime
  endDate       DateTime?
  workersNeeded Int           @default(1)
  skills        String[]      @default([])
  requirements  String?
  employerId    String
  status        JobStatus     @default(ACTIVE)
  isBoosted     Boolean       @default(false)
  boostedUntil  DateTime?
  images        String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  employer      User          @relation("EmployerJobs", fields: [employerId], references: [id], onDelete: Cascade)
  applications  Application[]
  
  @@map("jobs")
}

model Application {
  id             String            @id @default(cuid())
  jobId          String
  applicantId    String
  status         ApplicationStatus @default(PENDING)
  coverLetter    String?
  proposedSalary Decimal?
  appliedAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relations
  job            Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicant      User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, applicantId])
  @@map("applications")
}

model Rating {
  id          String   @id @default(cuid())
  rating      Int      @db.SmallInt
  comment     String?
  fromUserId  String
  toUserId    String
  jobId       String?
  createdAt   DateTime @default(now())
  
  // Relations
  fromUser    User     @relation("RatingFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("RatingTo", fields: [toUserId], references: [id], onDelete: Cascade)
  
  @@unique([fromUserId, toUserId, jobId])
  @@map("ratings")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  jobId       String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  // Relations
  sender      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model PaymentTransaction {
  id              String            @id @default(cuid())
  amount          Decimal
  currency        String            @default("KES")
  status          TransactionStatus @default(PENDING)
  jobId           String
  employerId      String
  workerId        String?
  transactionRef  String            @unique
  paymentMethod   String?
  flutterwaveRef  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("payment_transactions")
}

model AdminSettings {
  id                    String   @id @default(cuid())
  jobPostingFee         Decimal  @default(0)
  jobBoostingFee        Decimal  @default(0)
  commissionRate        Decimal  @default(0.05)
  premiumMembershipFee  Decimal  @default(0)
  updatedAt             DateTime @updatedAt
  
  @@map("admin_settings")
}

model Consent {
  id            String        @id @default(cuid())
  userId        String?       // Optional - can be null for anonymous consents
  sessionId     String        @unique
  consentType   ConsentType   @default(GENERAL)
  purpose       String        // Purpose of data collection
  status        ConsentStatus @default(PENDING)
  ipAddress     String?
  userAgent     String?
  location      String?       // Geographic location
  language      String?       // User's preferred language
  consentText   String        // The actual consent text shown to user
  version       String        @default("1.0") // Consent version for tracking changes
  metadata      Json?         // Additional metadata (browser info, etc.)
  givenAt       DateTime?     // When consent was given
  revokedAt     DateTime?     // When consent was revoked
  expiresAt     DateTime?     // When consent expires (if applicable)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  user          User?         @relation("UserConsents", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionId])
  @@index([consentType])
  @@index([status])
  @@index([createdAt])
  @@map("consents")
}

// Enums
enum UserType {
  WORKER
  EMPLOYER
  ADMIN
}

enum JobType {
  TEMPORARY
  SEASONAL
  PERMANENT
}

enum SalaryType {
  DAILY
  WEEKLY
  MONTHLY
  FIXED
}

enum JobStatus {
  ACTIVE
  FILLED
  EXPIRED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ConsentType {
  GENERAL          // General data processing consent
  MARKETING        // Marketing communications
  ANALYTICS        // Website analytics
  COOKIES          // Cookie usage
  LOCATION         // Location data
  PROFILE_DATA     // Profile information
  JOB_MATCHING     // Job matching algorithm
  COMMUNICATION    // Communication between users
  PAYMENT          // Payment processing
  THIRD_PARTY      // Third-party integrations
}

enum ConsentStatus {
  PENDING          // Consent requested but not yet given
  ACCEPTED         // Consent given
  DECLINED         // Consent declined
  REVOKED          // Consent revoked after being given
  EXPIRED          // Consent expired
  WITHDRAWN        // Consent withdrawn by user
}